<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://www.eionix.co.in/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.eionix.co.in/" rel="alternate" type="text/html" /><updated>2022-11-05T23:37:58+05:30</updated><id>https://www.eionix.co.in/feed.xml</id><title type="html">Ananth’s Blog</title><subtitle>A personal blog having hobby projects.</subtitle><entry><title type="html">3D printing</title><link href="https://www.eionix.co.in/2022/08/27/3d-printing.html" rel="alternate" type="text/html" title="3D printing" /><published>2022-08-27T00:00:00+05:30</published><updated>2022-08-27T00:00:00+05:30</updated><id>https://www.eionix.co.in/2022/08/27/3d-printing</id><content type="html" xml:base="https://www.eionix.co.in/2022/08/27/3d-printing.html"><![CDATA[<script>
        OV.SetExternalLibLocation ('/assets/o3dv/libs'); // tell the engine where to find the libs folder
        OV.Init3DViewerElements (); // init all viewers on the page
</script>

<p>3D printing, also known as additive manufacturing, is a method of creating a three dimensional object layer-by-layer using a computer created design. Whether you are a product designer or a DIY enthusiast, this is an invaluable tool to your tool arsenal. I have been thinking for a long time to write a short blog about this. There are a ton of detailied blog/videos already exist, but still there is a lot of things you need to figure out through tial and error. This includes tuning your 3D printer for the best results, slicing softwares, custom addons for your printer, post processing tools (locally available products) &amp; methods, 3D cad tools, paints etc… This blog try to cover what I have gone while tinkering with the 3D printing.</p>

<p>Fun things apart, this is a great tool if you are a product designer (even by profession or as a hobby). If you like to design things on your own then this saves you a lot of time in dealing with prototypes. I own a Creality Ender 3 Pro (Bought it 2 years back). It’s a pretty decent FDM (Fused Deposition Modeling) printer you can buy. I also own an AnyCubic resin printer which is a good addon if you are interested in minis or prints that require minute details. It’s a little messy to handle though and require proper care in handling.</p>

<h2 id="ready-made-models">Ready made models</h2>

<div class="online_3d_viewer" style="width: 300px; height: 300px;" model="/assets/res/Eiffel_tower_sample.STL">
</div>

<p>I started printing free models that is publically avaialble. There is a huge colection of super cool 3d models at <a href="https://myminifactory.com">myminifactory.com</a> and <a href="https://thingiverse.com">thingiverse.com</a>. Your first print is destined to be ruined (if not, don’t worry you will have a lot waiting to be thrown out to trash).</p>

<p>Some super cool models…</p>

<p><a href="https://www.thingiverse.com/thing:4543820"><img src="https://cdn.thingiverse.com/assets/d4/1c/e5/af/09/featured_preview_deadpool-v2-patreon.jpg" alt="dead-pool" /></a>
<!-- [![thanos](https://cdn.thingiverse.com/assets/1e/29/6b/74/d4/featured_preview_thanos-thumb-patreon.jpg)](https://www.thingiverse.com/thing:4543831) -->
<a href="https://www.thingiverse.com/thing:4543803"><img src="https://cdn.thingiverse.com/assets/59/b8/4e/33/5f/featured_preview_spiderman-patreon.jpg" alt="spider-man" /></a>
<a href="https://www.thingiverse.com/thing:3352751"><img src="https://cdn.thingiverse.com/renders/84/46/31/ed/af/54e5ef6e132cea1d052ab617813f7885_preview_featured.jpg" alt="death-note" /></a>
<a href="https://www.thingiverse.com/thing:3375742"><img src="https://cdn.thingiverse.com/renders/4b/1f/63/30/27/9a06c5de948b68066472ceedce4bf774_preview_featured.jpg" alt="dead-pool" /></a></p>

<h2 id="slicer">Slicer</h2>

<p>First thing you need is a slicer software. For FDM, you can use <a href="https://ultimaker.com/software/ultimaker-cura">CURA</a>. It is an open source 3D printer created for Ultimaker printers but supports a wide range of others as well. There are several softwares out there you could try like PrusaSlicer. But it is always a good idea to rely on an opensource alternative than a comercial/closed one. STL is a widely used format for sharing 3D models. A slicer software like CURA will slice this 3D model into several layers and create Gcodes <a href="https://all3dp.com/2/3d-printer-g-code-commands-list-tutorial/">More info here</a> that the printer can understand.</p>

<p>For resin printing you can use Chitubox. Like FDM slicer there are not as many options available. You need to find somthing that is supported by yuor printer. I am using both <a href="https://www.anycubic.com/blogs/news/all-you-need-to-know-about-photon-mono-series">Phtoton Workshop</a> and <a href="https://www.chitubox.com/en/page/chitubox-free">Chitubox</a>.</p>

<h2 id="post-processing">Post processing</h2>

<p>There are several post processing techniques you could do to get a good finished product. This writeup covers a lot <a href="https://www.makerbot.com/professional/post-processing/">https://www.makerbot.com/professional/post-processing/</a>.</p>

<ul>
  <li>Sanding
    <ul>
      <li>If you are looking for a finished product then don’t skip this. :-)</li>
      <li>Start sanding from a lower grit (400) and gradually increase upto 1500 or even 2000</li>
      <li>You could use sanding tools like dremel to get this done fast</li>
      <li>You could cheat a little bit using clear coat spray paint <a href="https://www.amazon.in/SAMURAI-KUROBUSHI-Transparent-Glossy-Yourself/dp/B08B85B5BC">link</a> if your print is already smooth.</li>
    </ul>
  </li>
  <li>Gluing
    <ul>
      <li>You can break the whole print into multiple parts if build voulume is not enough.</li>
      <li>Also useful if there are areas in your model which is steep and cannot print with a lot of support.</li>
    </ul>
  </li>
  <li>Painting
    <ul>
      <li>Optionally you can use a primer as first coat. Primer filler is a high build spray filler that comes in aerosol form and can be purchased at most local hardware stores.</li>
      <li>Filler used for wood works and automobiles also works fine. But don’t forget to sand it before painting.</li>
      <li>Acrylic spary paint works just fine. You can find these in most of the local hardware shops. <a href="https://www.amazon.in/Nippon-Paint-Pylac-Spray-RS-Black/dp/B01GKBXUB8/ref=sr_1_11">link</a></li>
      <li>For smaller prints like mini, acrylic paints like these are just fine <a href="https://www.amazon.in/BRUSTRO-Artists-Acrylic-Pastel-Colours/dp/B0BG2S8FT8/ref=sr_1_18">link</a> or even this one <a href="https://www.amazon.in/Camlin-Kokuyo-Fabrica-Acrylic-Colors/dp/B00LY1FKI6/ref=sr_1_27">link</a></li>
      <li>I used to do a clear coat if it’s painted by acrylic colours.</li>
    </ul>
  </li>
</ul>

<h2 id="3d-cad-software">3D CAD software</h2>

<p>Printing free models and painting those are fun. But what’s more fun is to start designing 3D models for your prototypes. You have a big list of CAD softwares that are available here. One could start with tinkercad and move towards a good professional CAD software. I did start with SolidWorks and then moved to Fusion 360. Solidworks is an overkill for these kind of works. But Fusion360 was very good; atleast initially. They allow you to use this freely if you are a student. It is tightly coupled with their cloud platform and it had some one year free usage. Had faced lot of issues initially and it need an active internet connection (most of the time) to work. Also there was limitted support for sculpting and creating organic shapes. I finally settled with Blender which is a very good software and is completly open source. I won’t lie, it has a steep learning curve. But I would say it is worth the effort. Parametric designs may be somewhat less intuitive but blender is an all in one solution. You can do sculpting as well. Add some lights and create cool renders of your product animate little bit and may be rig your model and do some inverse IK :-).</p>

<ul>
  <li><a href="https://www.tinkercad.com/">Tincker</a></li>
  <li><a href="https://www.autodesk.com/products/fusion-360/overview?term=1-YEAR&amp;tab=subscription">Fusion360</a></li>
  <li><a href="https://www.blender.org/download/">Blender</a></li>
</ul>

<p><img src="/assets/img/mushroom_v3.png" alt="One of my design" /></p>]]></content><author><name></name></author><category term="3D printing" /><summary type="html"><![CDATA[3D printing, also known as additive manufacturing, is a method of creating a three dimensional object layer-by-layer using a computer created design. Whether you are a product designer or a DIY enthusiast, this is an invaluable tool to your tool arsenal. I have been thinking for a long time to write a short blog about this. There are a ton of detailied blog/videos already exist, but still there is a lot of things you need to figure out through tial and error. This includes tuning your 3D printer for the best results, slicing softwares, custom addons for your printer, post processing tools (locally available products) &amp; methods, 3D cad tools, paints etc… This blog try to cover what I have gone while tinkering with the 3D printing.]]></summary></entry><entry><title type="html">Iron Man Plymouth Theme</title><link href="https://www.eionix.co.in/2019/10/29/iron-man-plymouth-theme.html" rel="alternate" type="text/html" title="Iron Man Plymouth Theme" /><published>2019-10-29T00:00:00+05:30</published><updated>2019-10-29T00:00:00+05:30</updated><id>https://www.eionix.co.in/2019/10/29/iron-man-plymouth-theme</id><content type="html" xml:base="https://www.eionix.co.in/2019/10/29/iron-man-plymouth-theme.html"><![CDATA[<p>This is an Iron Man theme I created by slicing some cool gif files I found online. You can download the theme and find the installation steps on my github account. <a href="https://github.com/krishnan793/plymouth-iron-man-eionix">Link</a></p>

<p><img src="/assets/img/preview.gif" alt="preview" /></p>

<p>The theme is created for Ubuntu 18.00. But this can be installed on previous versions with slight modification.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/GplfhCUxckI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>]]></content><author><name></name></author><category term="Linux" /><summary type="html"><![CDATA[This is an Iron Man theme I created by slicing some cool gif files I found online. You can download the theme and find the installation steps on my github account. Link]]></summary></entry><entry><title type="html">Reverse Engineer DDPAI Dash Cam Firmware</title><link href="https://www.eionix.co.in/2019/10/10/reverse-engineer-ddpai-firmware.html" rel="alternate" type="text/html" title="Reverse Engineer DDPAI Dash Cam Firmware" /><published>2019-10-10T00:00:00+05:30</published><updated>2019-10-10T00:00:00+05:30</updated><id>https://www.eionix.co.in/2019/10/10/reverse-engineer-ddpai-firmware</id><content type="html" xml:base="https://www.eionix.co.in/2019/10/10/reverse-engineer-ddpai-firmware.html"><![CDATA[<p>I have been looking for a good mid range Dash cam for my car. I was thinking to integrate this to my custom build infotainment system. For this, there need to be some option to get live stream. I bought this DDPAI Mini Car Dash Camera from Amazon <a href="https://www.amazon.in/gp/product/B07L6JVT92/">Link</a> (Official site <a href="http://en.ddpai.com/product/mini/4.html">Link</a>), but I was not sure whether I can access the live stream or not. The product looks good, companion app works smooth also, and there is live stream in the app. My goal was to figure out a way to get live stream so that I can use it in my program. May be have a look at it’s firmware and do some little hack if possible.</p>

<p><img src="/assets/img/ddpai.png" alt="DDPAI" /></p>

<p>In the officail site, they have mentioned about Hi3516E. it is an SoC buid by HISILICON that runs on Linux-3.18 (probably running Huawei LiteOS <a href="https://liteos.github.io/en/kernel/task.html#overview">Link</a>). Looking into the datasheet <a href="http://support.hkvstar.com/file/Hi3516E%20V100%20Professional%20HD%20IP%20Camera%20SoC%20Brief%20Data%20Sheet.pdf">Link</a>, it supports following encodings,</p>
<ul>
  <li>H.264 BP/MP/HP</li>
  <li>H.265 Main Profile</li>
  <li>MJPEG/JPEG baseline</li>
</ul>

<p>But from the official site, it’s mentioned H.264. So most probably the stream will be in this format. This came handy later in the process.</p>

<p>Once powered, camera starts a WiFi AP. Client can connect to this using default password 1234567890 and use companion app to configure. Put your WiFi interface to monitor mode and start listening on the traffic.</p>

<p><img src="/assets/img/init_traffic.jpg" alt="Initial traffic" /></p>

<p>I could see a lot of HTTP traffic between companion app and 193.168.0.1 which is the camera device. So they have some kind of REST API service running on port 80. Let’s look into the flow.</p>

<p><img src="/assets/img/flow.jpg" alt="Flow" /></p>

<p>To get a sessionid they are calling <code class="language-plaintext highlighter-rouge">POST /vcam/cmd.cgi?cmd=API_RequestSessionID</code>. This set a Cookie and they are reusing it for further communication. Then they are synching the time. Why do they need imei number for that? Strange. let’s look the subsequent requests.</p>

<div class="language-config highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">POST</span> /<span class="n">vcam</span>/<span class="n">cmd</span>.<span class="n">cgi</span>?<span class="n">cmd</span>=<span class="n">API_GetBaseInfo</span> <span class="n">HTTP</span>/<span class="m">1</span>.<span class="m">1</span>
<span class="n">Accept</span>-<span class="n">Encoding</span>: <span class="n">gzip</span>
<span class="n">sessionid</span>: <span class="n">sjqPqaCL9GPT8WanzOn1THq4T1iSKLm</span>
<span class="n">Cookie</span>: <span class="n">SessionID</span>=<span class="n">sjqPqaCL9GPT8WanzOn1THq4T1iSKLm</span>
<span class="n">Content</span>-<span class="n">Type</span>: <span class="n">application</span>/<span class="n">x</span>-<span class="n">www</span>-<span class="n">form</span>-<span class="n">urlencoded</span>
<span class="n">User</span>-<span class="n">Agent</span>: ****************************************
<span class="n">Host</span>: <span class="m">193</span>.<span class="m">168</span>.<span class="m">0</span>.<span class="m">1</span>
<span class="n">Connection</span>: <span class="n">Keep</span>-<span class="n">Alive</span>
<span class="n">Content</span>-<span class="n">Length</span>: <span class="m">0</span>

<span class="n">HTTP</span>/<span class="m">1</span>.<span class="m">1</span> <span class="m">200</span> <span class="n">OK</span>
<span class="n">Server</span>: <span class="n">VYOU_HTTP_SERVER</span>/<span class="m">2</span>.<span class="m">1</span>.<span class="m">3</span> <span class="n">CAM</span> <span class="n">WEB</span> <span class="m">1</span>.<span class="m">0</span>
<span class="n">Content</span>-<span class="n">Type</span>: <span class="n">text</span>/<span class="n">plain</span>; <span class="n">charset</span>=<span class="n">UTF</span>-<span class="m">8</span>
<span class="n">Date</span>: <span class="n">Wed</span>, <span class="m">09</span> <span class="n">Oct</span> <span class="m">2019</span> <span class="m">21</span>:<span class="m">54</span>:<span class="m">41</span> <span class="n">GMT</span>
<span class="n">Last</span>-<span class="n">Modified</span>: <span class="n">Wed</span>, <span class="m">09</span> <span class="n">Oct</span> <span class="m">2019</span> <span class="m">21</span>:<span class="m">54</span>:<span class="m">41</span> <span class="n">GMT</span>
<span class="n">Connection</span>: <span class="n">Keep</span>-<span class="n">Alive</span>
<span class="n">Cache</span>-<span class="n">Control</span>: <span class="n">no</span>-<span class="n">cache</span>,<span class="n">no</span>-<span class="n">store</span>
<span class="n">Content</span>-<span class="n">Length</span>: <span class="m">651</span>

{<span class="s2">"errcode"</span>:<span class="m">0</span>,<span class="s2">"data"</span>:<span class="s2">"{\"</span><span class="n">nickname</span>\<span class="s2">":\"</span><span class="n">vYou_DDPai_MINI</span>\<span class="s2">",\"</span><span class="n">password</span>\<span class="s2">":\"</span><span class="m">1234567890</span>\<span class="s2">",\"</span><span class="n">ordernum</span>\<span class="s2">":\"</span><span class="n">DDPaiMin</span>\<span class="s2">",\"</span><span class="n">model</span>\<span class="s2">":\"</span><span class="n">DDPai</span> <span class="n">miniONE_LITE_Overseas</span>\<span class="s2">",\"</span><span class="n">version</span>\<span class="s2">":\"</span><span class="n">v4</span>.<span class="m">7</span>.<span class="m">0</span>.<span class="m">22</span>\<span class="s2">",\"</span><span class="n">uuid</span>\<span class="s2">":\"</span>*****-****-****-****-********\<span class="s2">",\"</span><span class="n">sn</span>\<span class="s2">":\"</span>\<span class="s2">",\"</span><span class="n">macaddr</span>\<span class="s2">":\"</span>**:**:**:**:**:**\<span class="s2">",\"</span><span class="n">chipsn</span>\<span class="s2">":\"</span>\<span class="s2">",\"</span><span class="n">legalret</span>\<span class="s2">":1,\"</span><span class="n">btnver</span>\<span class="s2">":3,\"</span><span class="n">totalruntime</span>\<span class="s2">":7471,\"</span><span class="n">sdcapacity</span>\<span class="s2">":31158784,\"</span><span class="n">sdspare</span>\<span class="s2">":24202912,\"</span><span class="n">sdbrand</span>\<span class="s2">":\"</span>\<span class="s2">",\"</span><span class="n">hbbitrate</span>\<span class="s2">":10240,\"</span><span class="n">hsbitrate</span>\<span class="s2">":2048,\"</span><span class="n">mbbitrate</span>\<span class="s2">":10240,\"</span><span class="n">msbitrate</span>\<span class="s2">":2048,\"</span><span class="n">lbbitrate</span>\<span class="s2">":10240,\"</span><span class="n">lsbitrate</span>\<span class="s2">":2048,\"</span><span class="n">default_user</span>\<span class="s2">":\"</span><span class="n">A1000030EBAA94</span>\<span class="s2">",\"</span><span class="n">is_neeed_update</span>\<span class="s2">":0,\"</span><span class="n">edog_model</span>\<span class="s2">":\"</span>\<span class="s2">",\"</span><span class="n">edog_version</span>\<span class="s2">":\"</span>\<span class="s2">",\"</span><span class="n">edog_status</span>\<span class="s2">":2,\"</span><span class="n">cid</span>\<span class="s2">":\"</span>\<span class="s2">"}"</span>}

<span class="n">GET</span> /<span class="n">record</span>.<span class="n">log</span> <span class="n">HTTP</span>/<span class="m">1</span>.<span class="m">1</span>
<span class="n">Accept</span>-<span class="n">Encoding</span>: 
<span class="n">User</span>-<span class="n">Agent</span>: ****************************************
<span class="n">Host</span>: <span class="m">193</span>.<span class="m">168</span>.<span class="m">0</span>.<span class="m">1</span>
<span class="n">Connection</span>: <span class="n">Keep</span>-<span class="n">Alive</span>

<span class="n">HTTP</span>/<span class="m">1</span>.<span class="m">1</span> <span class="m">200</span> <span class="n">OK</span>
<span class="n">Server</span>: <span class="n">VYOU_HTTP_SERVER</span>/<span class="m">2</span>.<span class="m">1</span>.<span class="m">3</span> <span class="n">CAM</span> <span class="n">WEB</span> <span class="m">1</span>.<span class="m">0</span>
<span class="n">Content</span>-<span class="n">Type</span>: <span class="n">text</span>/<span class="n">plain</span>; <span class="n">charset</span>=<span class="n">UTF</span>-<span class="m">8</span>
<span class="n">Date</span>: <span class="n">Wed</span>, <span class="m">09</span> <span class="n">Oct</span> <span class="m">2019</span> <span class="m">21</span>:<span class="m">54</span>:<span class="m">41</span> <span class="n">GMT</span>
<span class="n">Last</span>-<span class="n">Modified</span>: <span class="n">Wed</span>, <span class="m">09</span> <span class="n">Oct</span> <span class="m">2019</span> <span class="m">21</span>:<span class="m">54</span>:<span class="m">41</span> <span class="n">GMT</span>
<span class="n">Connection</span>: <span class="n">Keep</span>-<span class="n">Alive</span>
<span class="n">Cache</span>-<span class="n">Control</span>: <span class="n">no</span>-<span class="n">cache</span>,<span class="n">no</span>-<span class="n">store</span>
<span class="n">Content</span>-<span class="n">Length</span>: <span class="m">4329</span>

{<span class="s2">"nickname"</span>:<span class="s2">"vYou_DDPai_MINI"</span>,<span class="s2">"password"</span>:<span class="s2">"1234567890"</span>,<span class="s2">"ordernum"</span>:<span class="s2">"DDPaiMin"</span>,<span class="s2">"model"</span>:<span class="s2">""</span>,<span class="s2">"version"</span>:<span class="s2">"v4.7.0.22"</span>,<span class="s2">"uuid"</span>:<span class="s2">"***********************"</span>,<span class="s2">"sn"</span>:<span class="s2">""</span>,<span class="s2">"macaddr"</span>:<span class="s2">"**:**:**:**:**:**"</span>,<span class="s2">"chipsn"</span>:<span class="s2">""</span>,<span class="s2">"legalret"</span>:<span class="m">1</span>,<span class="s2">"btnver"</span>:<span class="m">3</span>,<span class="s2">"totalruntime"</span>:<span class="m">7471</span>,<span class="s2">"sdcapacity"</span>:<span class="m">31158784</span>,<span class="s2">"sdspare"</span>:<span class="m">24202912</span>,<span class="s2">"sdbrand"</span>:<span class="s2">""</span>,<span class="s2">"hbbitrate"</span>:<span class="m">10240</span>,<span class="s2">"hsbitrate"</span>:<span class="m">2048</span>,<span class="s2">"mbbitrate"</span>:<span class="m">10240</span>,<span class="s2">"msbitrate"</span>:<span class="m">2048</span>,<span class="s2">"lbbitrate"</span>:<span class="m">10240</span>,<span class="s2">"lsbitrate"</span>:<span class="m">2048</span>,<span class="s2">"default_user"</span>:<span class="s2">"A1000030EBAA94"</span>,<span class="s2">"is_neeed_update"</span>:<span class="m">0</span>,<span class="s2">"edog_model"</span>:<span class="s2">""</span>,<span class="s2">"edog_version"</span>:<span class="s2">""</span>,<span class="s2">"edog_status"</span>:<span class="m">2</span>,<span class="s2">"cid"</span>:<span class="s2">""</span>}
....

<span class="n">POST</span> /<span class="n">vcam</span>/<span class="n">cmd</span>.<span class="n">cgi</span>?<span class="n">cmd</span>=<span class="n">APP_AvCapSet</span> <span class="n">HTTP</span>/<span class="m">1</span>.<span class="m">1</span>
<span class="n">Accept</span>-<span class="n">Encoding</span>: <span class="n">gzip</span>
<span class="n">sessionid</span>: <span class="n">sjqPqaCL9GPT8WanzOn1THq4T1iSKLm</span>
<span class="n">Cookie</span>: <span class="n">SessionID</span>=<span class="n">sjqPqaCL9GPT8WanzOn1THq4T1iSKLm</span>
<span class="n">Content</span>-<span class="n">Type</span>: <span class="n">application</span>/<span class="n">x</span>-<span class="n">www</span>-<span class="n">form</span>-<span class="n">urlencoded</span>
<span class="n">User</span>-<span class="n">Agent</span>: ****************************************
<span class="n">Host</span>: <span class="m">193</span>.<span class="m">168</span>.<span class="m">0</span>.<span class="m">1</span>
<span class="n">Connection</span>: <span class="n">Keep</span>-<span class="n">Alive</span>
<span class="n">Content</span>-<span class="n">Length</span>: <span class="m">30</span>

{<span class="s2">"stream_type"</span>:<span class="m">0</span>,<span class="s2">"frmrate"</span>:<span class="m">30</span>}

<span class="n">HTTP</span>/<span class="m">1</span>.<span class="m">1</span> <span class="m">200</span> <span class="n">OK</span>
<span class="n">Server</span>: <span class="n">VYOU_HTTP_SERVER</span>/<span class="m">2</span>.<span class="m">1</span>.<span class="m">3</span> <span class="n">CAM</span> <span class="n">WEB</span> <span class="m">1</span>.<span class="m">0</span>
<span class="n">Content</span>-<span class="n">Type</span>: <span class="n">text</span>/<span class="n">plain</span>; <span class="n">charset</span>=<span class="n">UTF</span>-<span class="m">8</span>
<span class="n">Date</span>: <span class="n">Wed</span>, <span class="m">09</span> <span class="n">Oct</span> <span class="m">2019</span> <span class="m">21</span>:<span class="m">54</span>:<span class="m">41</span> <span class="n">GMT</span>
<span class="n">Last</span>-<span class="n">Modified</span>: <span class="n">Wed</span>, <span class="m">09</span> <span class="n">Oct</span> <span class="m">2019</span> <span class="m">21</span>:<span class="m">54</span>:<span class="m">41</span> <span class="n">GMT</span>
<span class="n">Connection</span>: <span class="n">Keep</span>-<span class="n">Alive</span>
<span class="n">Cache</span>-<span class="n">Control</span>: <span class="n">no</span>-<span class="n">cache</span>,<span class="n">no</span>-<span class="n">store</span>
<span class="n">Content</span>-<span class="n">Length</span>: <span class="m">23</span>

{<span class="s2">"errcode"</span>:<span class="m">0</span>,<span class="s2">"data"</span>:<span class="s2">""</span>}
</code></pre></div></div>
<p>Some default user names, password, etc… It seems <code class="language-plaintext highlighter-rouge">POST /vcam/cmd.cgi?cmd=APP_AvCapSet</code> sets stream channel and fps.</p>

<div class="language-config highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">POST</span> /<span class="n">vcam</span>/<span class="n">cmd</span>.<span class="n">cgi</span>?<span class="n">cmd</span>=<span class="n">API_RequestCertificate</span> <span class="n">HTTP</span>/<span class="m">1</span>.<span class="m">1</span>
<span class="n">Accept</span>-<span class="n">Encoding</span>: <span class="n">gzip</span>
<span class="n">sessionid</span>: <span class="n">sjqPqaCL9GPT8WanzOn1THq4T1iSKLm</span>
<span class="n">Cookie</span>: <span class="n">SessionID</span>=<span class="n">sjqPqaCL9GPT8WanzOn1THq4T1iSKLm</span>
<span class="n">Content</span>-<span class="n">Type</span>: <span class="n">application</span>/<span class="n">x</span>-<span class="n">www</span>-<span class="n">form</span>-<span class="n">urlencoded</span>
<span class="n">User</span>-<span class="n">Agent</span>: ****************************************
<span class="n">Host</span>: <span class="m">193</span>.<span class="m">168</span>.<span class="m">0</span>.<span class="m">1</span>
<span class="n">Connection</span>: <span class="n">Keep</span>-<span class="n">Alive</span>
<span class="n">Content</span>-<span class="n">Length</span>: <span class="m">70</span>

{<span class="s2">"user"</span>:<span class="s2">"admin"</span>,<span class="s2">"password"</span>:<span class="s2">"admin"</span>,<span class="s2">"level"</span>:<span class="m">0</span>,<span class="s2">"uid"</span>:<span class="s2">"*************"</span>}

<span class="n">HTTP</span>/<span class="m">1</span>.<span class="m">1</span> <span class="m">200</span> <span class="n">OK</span>
<span class="n">Server</span>: <span class="n">VYOU_HTTP_SERVER</span>/<span class="m">2</span>.<span class="m">1</span>.<span class="m">3</span> <span class="n">CAM</span> <span class="n">WEB</span> <span class="m">1</span>.<span class="m">0</span>
<span class="n">Content</span>-<span class="n">Type</span>: <span class="n">text</span>/<span class="n">plain</span>; <span class="n">charset</span>=<span class="n">UTF</span>-<span class="m">8</span>
<span class="n">Date</span>: <span class="n">Wed</span>, <span class="m">09</span> <span class="n">Oct</span> <span class="m">2019</span> <span class="m">21</span>:<span class="m">54</span>:<span class="m">41</span> <span class="n">GMT</span>
<span class="n">Last</span>-<span class="n">Modified</span>: <span class="n">Wed</span>, <span class="m">09</span> <span class="n">Oct</span> <span class="m">2019</span> <span class="m">21</span>:<span class="m">54</span>:<span class="m">41</span> <span class="n">GMT</span>
<span class="n">Connection</span>: <span class="n">Keep</span>-<span class="n">Alive</span>
<span class="n">Cache</span>-<span class="n">Control</span>: <span class="n">no</span>-<span class="n">cache</span>,<span class="n">no</span>-<span class="n">store</span>
<span class="n">Content</span>-<span class="n">Length</span>: <span class="m">23</span>

{<span class="s2">"errcode"</span>:<span class="m">0</span>,<span class="s2">"data"</span>:<span class="s2">""</span>}

<span class="n">POST</span> /<span class="n">vcam</span>/<span class="n">cmd</span>.<span class="n">cgi</span>?<span class="n">cmd</span>=<span class="n">APP_AvCapReq</span> <span class="n">HTTP</span>/<span class="m">1</span>.<span class="m">1</span>
<span class="n">Accept</span>-<span class="n">Encoding</span>: <span class="n">gzip</span>
<span class="n">sessionid</span>: <span class="n">sjqPqaCL9GPT8WanzOn1THq4T1iSKLm</span>
<span class="n">Cookie</span>: <span class="n">SessionID</span>=<span class="n">sjqPqaCL9GPT8WanzOn1THq4T1iSKLm</span>
<span class="n">Content</span>-<span class="n">Type</span>: <span class="n">application</span>/<span class="n">x</span>-<span class="n">www</span>-<span class="n">form</span>-<span class="n">urlencoded</span>
<span class="n">User</span>-<span class="n">Agent</span>: ****************************************
<span class="n">Host</span>: <span class="m">193</span>.<span class="m">168</span>.<span class="m">0</span>.<span class="m">1</span>
<span class="n">Connection</span>: <span class="n">Keep</span>-<span class="n">Alive</span>
<span class="n">Content</span>-<span class="n">Length</span>: <span class="m">0</span>

<span class="n">HTTP</span>/<span class="m">1</span>.<span class="m">1</span> <span class="m">200</span> <span class="n">OK</span>
<span class="n">Server</span>: <span class="n">VYOU_HTTP_SERVER</span>/<span class="m">2</span>.<span class="m">1</span>.<span class="m">3</span> <span class="n">CAM</span> <span class="n">WEB</span> <span class="m">1</span>.<span class="m">0</span>
<span class="n">Content</span>-<span class="n">Type</span>: <span class="n">text</span>/<span class="n">plain</span>; <span class="n">charset</span>=<span class="n">UTF</span>-<span class="m">8</span>
<span class="n">Date</span>: <span class="n">Wed</span>, <span class="m">09</span> <span class="n">Oct</span> <span class="m">2019</span> <span class="m">21</span>:<span class="m">54</span>:<span class="m">41</span> <span class="n">GMT</span>
<span class="n">Last</span>-<span class="n">Modified</span>: <span class="n">Wed</span>, <span class="m">09</span> <span class="n">Oct</span> <span class="m">2019</span> <span class="m">21</span>:<span class="m">54</span>:<span class="m">41</span> <span class="n">GMT</span>
<span class="n">Connection</span>: <span class="n">Keep</span>-<span class="n">Alive</span>
<span class="n">Cache</span>-<span class="n">Control</span>: <span class="n">no</span>-<span class="n">cache</span>,<span class="n">no</span>-<span class="n">store</span>
<span class="n">Content</span>-<span class="n">Length</span>: <span class="m">173</span>

{<span class="s2">"errcode"</span>:<span class="m">0</span>,<span class="s2">"data"</span>:{<span class="s2">"bs_pixel"</span>:<span class="s2">"1920x1080"</span>,<span class="s2">"bs_bitrat"</span>:<span class="m">10240</span>,<span class="s2">"bs_frmrate"</span>:<span class="m">30</span>,<span class="s2">"ss_pixel"</span>:<span class="s2">"854x480"</span>,<span class="s2">"ss_bitrat"</span>:<span class="m">1536</span>,<span class="s2">"ss_frmrate"</span>:<span class="m">30</span>,<span class="s2">"aud_samplerate"</span>:<span class="m">16000</span>,<span class="s2">"aud_pt"</span>:<span class="s2">"AACLC"</span>}}
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">POST /vcam/cmd.cgi?cmd=APP_AvCapReq</code> This request put some light into the video stream details.</p>

<div class="language-config highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">POST</span> /<span class="n">vcam</span>/<span class="n">cmd</span>.<span class="n">cgi</span>?<span class="n">cmd</span>=<span class="n">APP_PlaybackLiveSwitch</span> <span class="n">HTTP</span>/<span class="m">1</span>.<span class="m">1</span>
<span class="n">Accept</span>-<span class="n">Encoding</span>: <span class="n">gzip</span>
<span class="n">sessionid</span>: <span class="n">sjqPqaCL9GPT8WanzOn1THq4T1iSKLm</span>
<span class="n">Cookie</span>: <span class="n">SessionID</span>=<span class="n">sjqPqaCL9GPT8WanzOn1THq4T1iSKLm</span>
<span class="n">Content</span>-<span class="n">Type</span>: <span class="n">application</span>/<span class="n">x</span>-<span class="n">www</span>-<span class="n">form</span>-<span class="n">urlencoded</span>
<span class="n">User</span>-<span class="n">Agent</span>: ****************************************
<span class="n">Host</span>: <span class="m">193</span>.<span class="m">168</span>.<span class="m">0</span>.<span class="m">1</span>
<span class="n">Connection</span>: <span class="n">Keep</span>-<span class="n">Alive</span>
<span class="n">Content</span>-<span class="n">Length</span>: <span class="m">31</span>

{<span class="s2">"switch"</span>:<span class="s2">"live"</span>,<span class="s2">"playtime"</span>:<span class="s2">""</span>}
</code></pre></div></div>

<p>This seems to be the one that triggers the live streams. Just after this request I could see a new TCP connection got established on port 6200.</p>

<p><img src="/assets/img/stream_tcp.jpg" alt="stream tcp" /></p>

<p>This might be the port for streaming video. I could see a lot of traffic on this connection just after this.</p>

<p><img src="/assets/img/video_stream.jpg" alt="stream tcp" /></p>

<p>Let’s see which all ports are opened in the cam. A quick scan using nmap shows following ports.</p>

<p><img src="/assets/img/nmap.jpg" alt="stream tcp" /></p>

<p>Port 443 is opened. But it is not a web/REST server like port 80. Sending <code class="language-plaintext highlighter-rouge">curl http://193.168.0.1:443</code> doesn’t return anything. No respone from server. <code class="language-plaintext highlighter-rouge">telnet 193.168.0.1 443</code> also had no luck. Might be running some other service. May be for flashing firmware.</p>

<p>Port 553 is running an rtsp service. This looks promising. Rtsp is for streaming video. Tried several common rtsp urls using VLC. All are returning BAD_REQUEST. No luck there. Port 6100 looks promissing. Let’s try opening this using VLC.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget "http://193.168.0.1:6200" -qO- | cvlc -
</code></pre></div></div>

<p>Vlc is unable to show any streams. Let’s try to specify the stream details. May be Vlc was unable to figure out proper streaming details.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget "http://193.168.0.1:6200" -qO- | cvlc - :demux=h264 --h264-fps=30 :clock-jitter=0
</code></pre></div></div>

<video autoplay="" muted="" playsinline="" width="600px" preload="none">
  <source src="/assets/res/stream_vlc2.mp4" type="video/mp4" />
</video>

<p>Finally!!! Vlc is able to get the stream with no issues. Smile… :-)</p>

<p>Now this is done let’s see whether I can access this from python &amp; opencv.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">cv2</span>

<span class="n">cap</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">VideoCapture</span><span class="p">(</span><span class="s">'tcp://193.168.0.1:6200/'</span><span class="p">)</span>
<span class="n">cap</span><span class="p">.</span><span class="nb">set</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>

<span class="k">while</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span>
    <span class="c1"># Capture frame-by-frame
</span>    <span class="n">ret</span><span class="p">,</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">cap</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>

    <span class="c1"># Our operations on the frame come here
</span>    <span class="c1">#gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
</span>
    <span class="c1"># Display the resulting frame
</span>    <span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">'frame'</span><span class="p">,</span><span class="n">frame</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">cv2</span><span class="p">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span> <span class="o">==</span> <span class="nb">ord</span><span class="p">(</span><span class="s">'q'</span><span class="p">):</span>
        <span class="k">break</span>

<span class="c1"># When everything done, release the capture
</span><span class="n">cap</span><span class="p">.</span><span class="n">release</span><span class="p">()</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</code></pre></div></div>

<video autoplay="" muted="" playsinline="" width="600px" preload="none">
  <source src="/assets/res/python_stream.mp4" type="video/mp4" />
</video>

<p>Perfect. I was able to get the stream from python. Mission accomplished. But let’s look further.</p>

<p>I ran nmap one more time covering all the ports. It’s extensive and took some time. It showed one more port 6100. Later found to be audio stream from the camera.</p>

<p>Let’s check whether we can have a look into the firmware. I could not find any links online to download firmware. When I first started the companion app, it asked for firmware update. So there should be some way to get it. Let’s look into the companion app traffic.</p>

<p>Download some packet capture software for Android like ‘Packet Capture’. It’s similar to wireshark, but for Android. It seems comapnion app is communicating with server in plain http. No SSL certificate for the server. That’s not good. They are sending some personal details back to the server which is not good. Let’s look into the firmware update details.</p>

<p>Clicking on check firmware option triggers this request.</p>

<p><img src="/assets/img/companion_app.png" alt="stream tcp" /></p>

<p>It seems they are sending both version details of firmware and companion app. Server seems to only respond with companion app details. This might probably because I am having latest firmware. Lets modify this request so that server think I am having a previous version.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-v</span> <span class="nt">-H</span> <span class="s1">'Content-Type: application/json'</span> <span class="nt">-X</span> POST http://apphw.ddpai.com/d/api/v1/version/check <span class="nt">--data</span> <span class="s1">'{
  "data": [
    {
      "model": "camera_app_android_overseas",
      "version": "v5.7.12.0926"
    },
    {
      "model": "DDPai miniONE_LITE_Overseas",
      "version": "v4.6.0.22"
    }
  ]
}'</span>
Note: Unnecessary use of <span class="nt">-X</span> or <span class="nt">--request</span>, POST is already inferred.
<span class="k">*</span>   Trying 47.89.133.142...
<span class="k">*</span> TCP_NODELAY <span class="nb">set</span>
<span class="k">*</span> Connected to apphw.ddpai.com <span class="o">(</span>47.89.133.142<span class="o">)</span> port 80 <span class="o">(</span><span class="c">#0)</span>
<span class="o">&gt;</span> POST /d/api/v1/version/check HTTP/1.1
<span class="o">&gt;</span> Host: apphw.ddpai.com
<span class="o">&gt;</span> User-Agent: curl/7.58.0
<span class="o">&gt;</span> Accept: <span class="k">*</span>/<span class="k">*</span>
<span class="o">&gt;</span> Content-Type: application/json
<span class="o">&gt;</span> Content-Length: 197
<span class="o">&gt;</span> 
<span class="k">*</span> upload completely sent off: 197 out of 197 bytes
&lt; HTTP/1.1 200 OK
&lt; Date: Thu, 10 Oct 2019 17:33:54 GMT
&lt; Content-Type: application/json<span class="p">;</span><span class="nv">charset</span><span class="o">=</span>UTF-8
&lt; Content-Length: 1457
&lt; Connection: keep-alive
&lt; 
<span class="o">{</span>
    <span class="s2">"data"</span>: <span class="o">[</span>
        <span class="o">{</span>
            <span class="s2">"bigMd5"</span>: <span class="s2">"63D8900C41169ED76A107140F3119433"</span>,
            <span class="s2">"bigPath"</span>: <span class="s2">"http://httpsdatacdn.ddpai.com/update/camera_app_android_overseas/20180620/C05_ddpai_v5.7.9.0613_release_0613-1439_zip.apk"</span>,
            <span class="s2">"bigSize"</span>: 42322062,
            <span class="s2">"bigSmallSplit"</span>: <span class="s2">""</span>,
            <span class="s2">"bigTime"</span>: 0,
            <span class="s2">"commitDate"</span>: 1529486660540,
            <span class="s2">"desc"</span>: <span class="s2">"1、适配mix3机型；</span><span class="se">\n</span><span class="s2">2、使用新的视觉风格；</span><span class="se">\n</span><span class="s2">3、修复已知问题；"</span>,
            <span class="s2">"descCn"</span>: <span class="s2">"1、适配mix3机型；</span><span class="se">\n</span><span class="s2">2、使用新的视觉风格；</span><span class="se">\n</span><span class="s2">3、修复已知问题；"</span>,
            <span class="s2">"descDe"</span>: <span class="s2">""</span>,
            <span class="s2">"descEn"</span>: <span class="s2">"1、Adopted to mix3;</span><span class="se">\n</span><span class="s2">2、Adopted a new VI style；</span><span class="se">\n</span><span class="s2">3、Fixed bugs;"</span>,
            <span class="s2">"descEs"</span>: <span class="s2">""</span>,
            <span class="s2">"descFr"</span>: <span class="s2">""</span>,
            <span class="s2">"descIt"</span>: <span class="s2">""</span>,
            <span class="s2">"descPt"</span>: <span class="s2">""</span>,
            <span class="s2">"descRu"</span>: <span class="s2">""</span>,
            <span class="s2">"descTw"</span>: <span class="s2">""</span>,
            <span class="s2">"hasDel"</span>: <span class="nb">false</span>,
            <span class="s2">"id"</span>: 64,
            <span class="s2">"model"</span>: <span class="s2">"camera_app_android_overseas"</span>,
            <span class="s2">"name"</span>: <span class="s2">"camera_app_android_overseas"</span>,
            <span class="s2">"smallMd5"</span>: <span class="s2">""</span>,
            <span class="s2">"smallPath"</span>: <span class="s2">""</span>,
            <span class="s2">"smallSize"</span>: 0,
            <span class="s2">"smallTime"</span>: 0,
            <span class="s2">"smallVersion"</span>: <span class="s2">""</span>,
            <span class="s2">"version"</span>: <span class="s2">"v5.7.9.0613"</span>,
            <span class="s2">"versionType"</span>: 1
        <span class="o">}</span>,
        <span class="o">{</span>
            <span class="s2">"bigMd5"</span>: <span class="s2">"768A1E03AF163ACC53C0841AE5F5EF8B"</span>,
            <span class="s2">"bigPath"</span>: <span class="s2">"http://httpsdatacdn.ddpai.com/update/DDPaiminiONE_LITE_Overseas/20190614/update_nolog.tar.gz"</span>,
            <span class="s2">"bigSize"</span>: 5365231,
            <span class="s2">"bigSmallSplit"</span>: <span class="s2">""</span>,
            <span class="s2">"bigTime"</span>: 60,
            <span class="s2">"commitDate"</span>: 1560481333328,
            <span class="s2">"desc"</span>: <span class="s2">"修复已知问题；"</span>,
            <span class="s2">"descCn"</span>: <span class="s2">"修复已知问题；"</span>,
            <span class="s2">"descDe"</span>: <span class="s2">""</span>,
            <span class="s2">"descEn"</span>: <span class="s2">"Fixed bugs;"</span>,
            <span class="s2">"descEs"</span>: <span class="s2">""</span>,
            <span class="s2">"descFr"</span>: <span class="s2">""</span>,
            <span class="s2">"descIt"</span>: <span class="s2">""</span>,
            <span class="s2">"descPt"</span>: <span class="s2">""</span>,
            <span class="s2">"descRu"</span>: <span class="s2">""</span>,
            <span class="s2">"descTw"</span>: <span class="s2">""</span>,
            <span class="s2">"hasDel"</span>: <span class="nb">false</span>,
            <span class="s2">"id"</span>: 74,
            <span class="s2">"model"</span>: <span class="s2">"DDPai miniONE_LITE_Overseas"</span>,
            <span class="s2">"name"</span>: <span class="s2">"DDPai miniONE_LITE_Overseas"</span>,
            <span class="s2">"smallMd5"</span>: <span class="s2">""</span>,
            <span class="s2">"smallPath"</span>: <span class="s2">""</span>,
            <span class="s2">"smallSize"</span>: 0,
            <span class="s2">"smallTime"</span>: 0,
            <span class="s2">"smallVersion"</span>: <span class="s2">""</span>,
            <span class="s2">"version"</span>: <span class="s2">"v4.7.0.22"</span>,
            <span class="s2">"versionType"</span>: 1
        <span class="o">}</span>
    <span class="o">]</span>,
    <span class="s2">"error_code"</span>: 0
<span class="o">}</span>
<span class="o">&gt;</span>
</code></pre></div></div>

<p>Ta daa!!! Our new firmware ready to be downloaded here <code class="language-plaintext highlighter-rouge">http://httpsdatacdn.ddpai.com/update/DDPaiminiONE_LITE_Overseas/20190614/update_nolog.tar.gz</code>. This is good. Let’s try to analyze the firmware.</p>

<p><img src="/assets/img/bin_walk.jpg" alt="bin walk" /></p>

<p>Eventhough it’s ramed as .gz, it doesn’t look a gzip compression. Running binwalk reveals that they use zlib compression. Let’s try to extract each part.</p>

<p><img src="/assets/img/bin_walk_extract.jpg" alt="bin_walk_extract" /></p>

<p>Let’s see what each part is.</p>

<p><img src="/assets/img/bin_walk_bin.jpg" alt="bin_walk_bin" /></p>

<p>We have two JFFS2 file system. Let’s see what’s inside. To extract JFFS2 file system you need to install jefferson.</p>

<p><img src="/assets/img/jefferson.jpg" alt="jefferson" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/sviehb/jefferson.git
Cloning into <span class="s1">'jefferson'</span>...
remote: Enumerating objects: 74, <span class="k">done</span><span class="nb">.</span>
remote: Total 74 <span class="o">(</span>delta 0<span class="o">)</span>, reused 0 <span class="o">(</span>delta 0<span class="o">)</span>, pack-reused 74
Unpacking objects: 100% <span class="o">(</span>74/74<span class="o">)</span>, <span class="k">done</span><span class="nb">.</span>
<span class="o">&gt;</span><span class="nb">ls
</span>1CD  1CD.zlib  21458  21458.zlib  35DE85  35DE85.zlib  50AB7A  50AB7A.zlib  56  56.zlib  E3  E3.zlib  jefferson
<span class="o">&gt;</span><span class="nb">cd </span>jefferson/
<span class="o">&gt;</span><span class="nb">ls
</span>LICENSE  README.md  setup.py  src
<span class="o">&gt;</span><span class="nb">sudo </span>python setup.py <span class="nb">install
</span>running <span class="nb">install
</span>running build
running build_py
creating build
creating build/lib.linux-x86_64-2.7
creating build/lib.linux-x86_64-2.7/jefferson
copying src/jefferson/rtime.py -&gt; build/lib.linux-x86_64-2.7/jefferson
copying src/jefferson/jffs2_lzma.py -&gt; build/lib.linux-x86_64-2.7/jefferson
copying src/jefferson/__init__.py -&gt; build/lib.linux-x86_64-2.7/jefferson
running build_scripts
creating build/scripts-2.7
copying and adjusting src/scripts/jefferson -&gt; build/scripts-2.7
changing mode of build/scripts-2.7/jefferson from 644 to 755
running install_lib
creating /usr/local/lib/python2.7/dist-packages/jefferson
copying build/lib.linux-x86_64-2.7/jefferson/rtime.py -&gt; /usr/local/lib/python2.7/dist-packages/jefferson
copying build/lib.linux-x86_64-2.7/jefferson/jffs2_lzma.py -&gt; /usr/local/lib/python2.7/dist-packages/jefferson
copying build/lib.linux-x86_64-2.7/jefferson/__init__.py -&gt; /usr/local/lib/python2.7/dist-packages/jefferson
byte-compiling /usr/local/lib/python2.7/dist-packages/jefferson/rtime.py to rtime.pyc
byte-compiling /usr/local/lib/python2.7/dist-packages/jefferson/jffs2_lzma.py to jffs2_lzma.pyc
byte-compiling /usr/local/lib/python2.7/dist-packages/jefferson/__init__.py to __init__.pyc
running install_scripts
copying build/scripts-2.7/jefferson -&gt; /usr/local/bin
changing mode of /usr/local/bin/jefferson to 755
running install_egg_info
Writing /usr/local/lib/python2.7/dist-packages/jefferson-0.2.egg-info
<span class="o">&gt;</span><span class="nb">cd</span> ../
<span class="o">&gt;</span><span class="nb">ls
</span>1CD  1CD.zlib  21458  21458.zlib  35DE85  35DE85.zlib  50AB7A  50AB7A.zlib  56  56.zlib  E3  E3.zlib  jefferson
<span class="o">&gt;</span>
<span class="o">&gt;</span>
<span class="o">&gt;</span>
<span class="o">&gt;</span>binwalk <span class="nt">-e</span> 35DE85

DECIMAL       HEXADECIMAL     DESCRIPTION
<span class="nt">--------------------------------------------------------------------------------</span>
0             0x0             JFFS2 filesystem, little endian
</code></pre></div></div>

<p>Let’s look into the file system.</p>

<p><img src="/assets/img/tree_1.jpg" alt="tree_1" /></p>

<p>Under aud_res there are several raw audio files are present. These are the notofication sounds, produced by the dashcam. Replacing these with custom sounds and reflashing the firmware will be cool.</p>

<p><img src="/assets/img/audacity.jpg" alt="audacity" /></p>

<p>There is some <code class="language-plaintext highlighter-rouge">libaiengine-80-liteos-2.9.4-20180402220227.so</code> file. The filename liteos confirms it is running Huawei LiteOS.</p>

<p>There is one bin file called paramdef.bin located in paramdef. Seems to be binary file. Let’s see the strings in it.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span>strings paramdef.bin 
arap
12.0
720P30
1080P30
1080P60
1440P30
1520P30
/app/sd/DCIM
/usrcfg/lastfilename.txt
/app/sd
/dev/mmcblk0p0
3.18.y
v4.7.0.22
DDPai miniONE_LITE
vYou_DDPai_MINI
1234567890
000000000000000
000000000000000
admin
admin
yyyy-MM-dd HH:mm:ss
zh_CN
DDPaiMin
v4.5.0.0
DDPai miniONE
2018-01-01
mrap
</code></pre></div></div>

<p>You could see WiFi SSID and default password, Firmware version, etc</p>

<p>Let’s see the other file system.</p>

<p><img src="/assets/img/tree2.jpg" alt="tree_2" /></p>

<p>This seems mostly configuration files. <code class="language-plaintext highlighter-rouge">config_product_devmng.ini</code> have details regarding WiFi SSID &amp; passwords.</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[devinfo]</span>
<span class="py">system_version</span>     <span class="p">=</span> <span class="s">"3.18.y"</span>
<span class="py">software_version</span>   <span class="p">=</span> <span class="s">"v4.7.0.22"</span>
<span class="py">model</span>              <span class="p">=</span> <span class="s">"DDPai miniONE_LITE"</span>

<span class="nn">[wifi]</span>
<span class="py">ssid</span>               <span class="p">=</span> <span class="s">"vYou_DDPai_MINI"</span>
<span class="py">password</span>           <span class="p">=</span> <span class="s">"1234567890"</span>
<span class="py">channel</span>            <span class="p">=</span> <span class="s">"11"</span>
<span class="py">enable</span>             <span class="p">=</span> <span class="s">"1"</span> <span class="s">1:true 0:false</span>
<span class="py">stawifissid</span>        <span class="p">=</span> <span class="s">"0"</span>
<span class="py">stawifipwd</span>         <span class="p">=</span> <span class="s">"0"</span>
<span class="py">stawifiauth</span>        <span class="p">=</span> <span class="s">"4"</span><span class="c">; 0:OPEN 1:WEP 2:WPAPSK 3:WPA2PSK 4:WPAPSK_WPA2PSK_MIX
</span>
<span class="nn">[autooff]</span>
<span class="py">enable</span>             <span class="p">=</span> <span class="s">"0"</span>
<span class="py">time</span>               <span class="p">=</span> <span class="s">"300"</span><span class="c">; unit s
</span>
<span class="nn">[dormant]</span>
<span class="py">enable</span>             <span class="p">=</span> <span class="s">"0"</span>
<span class="py">time</span>               <span class="p">=</span> <span class="s">"60"</span><span class="c">; unit s
</span>
<span class="nn">[clock]</span>
<span class="py">enable</span>             <span class="p">=</span> <span class="s">"0"</span>

<span class="nn">[onoff]</span>
<span class="py">auto_poweron_en</span>    <span class="p">=</span> <span class="s">"0"</span><span class="c">; 0:disable, 1:enable
</span><span class="s">auto_poweron_time  = "600"; seconds</span>
<span class="py">sd_card_cid</span>        <span class="p">=</span> <span class="s">"0000000000000000"</span>
<span class="py">sd_card_csd</span>        <span class="p">=</span> <span class="s">"0000000000000000"</span>
<span class="py">abnormal_poweroff</span>  <span class="p">=</span> <span class="s">"1"</span><span class="c">; 
</span><span class="s">onoff_key_press_time = "2000"; 200ms~2000ms</span>

<span class="nn">[sound]</span>
<span class="py">keysound</span>           <span class="p">=</span> <span class="s">"1"</span>
<span class="py">bootmusic</span>          <span class="p">=</span> <span class="s">"0"</span><span class="c">; 0: open bootmusic 1: close bootmusic
</span>
<span class="nn">[gsensor]</span>
<span class="py">gsensorrange</span>       <span class="p">=</span> <span class="s">"0"</span>

<span class="nn">[banma]</span>
<span class="py">verification</span>	   <span class="p">=</span> <span class="s">"0"</span>
</code></pre></div></div>
<p>There is some stawifissid params. May be enabling this will make Dashcam connect to a particular WiFi than creating an AP. Could see some reference for mounting at /app/sd/DCIM. Some of the config files have the details required for the live stream.</p>

<p>There is one more to extract.</p>

<p><img src="/assets/img/bin_walk_last.jpg" alt="bin_walk_last" /></p>

<p>This seems to be the main binary file resposible for the REST interface. Running strings list a lot of useful details. It seems to be written in c since I could see some reference here and there.</p>

<p><img src="/assets/img/bin_walk_c.jpg" alt="bin_walk_c" /></p>

<p>By just looking into strings, you will get a lot of information. I could able to extract the list of all APIs supported by the REST service.</p>

<ul>
  <li>API_RequestSessionID</li>
  <li>API_RequestCertificate</li>
  <li>API_SyncDate</li>
  <li>API_GetBaseInfo</li>
  <li>APP_AvCapReq</li>
  <li>APP_AvCapSet</li>
  <li>APP_PlaybackLiveSwitch</li>
  <li>API_GetMailboxData</li>
  <li>API_Logout</li>
  <li>API_TestGsensor</li>
  <li>API_TestSerial</li>
  <li>API_TestIndicator</li>
  <li>APP_PlaybackListReq</li>
  <li>APP_PlaybackPageListReq</li>
  <li>API_GeneralSave</li>
  <li>API_GeneralQuery</li>
  <li>APP_DeleteEvent</li>
  <li>API_CameraCapture</li>
  <li>API_AuthModify</li>
  <li>API_GetStorageInfo</li>
  <li>API_MmcFormat</li>
  <li>API_GetModuleState</li>
  <li>API_SetTimeForUpdateOrderNum</li>
  <li>API_ClearModuleFlags</li>
  <li>APP_AvInit</li>
  <li>APP_EventListReq</li>
  <li>APP_TimeLapseVideoListReq</li>
  <li>API_PlayModeQuery</li>
  <li>API_AuthQuery</li>
  <li>API_Reboot</li>
  <li>API_RestartWifi</li>
  <li>API_UpdFileMd5</li>
  <li>API_SetLogonInfo</li>
  <li>API_GetLogonRecord</li>
  <li>APP_ParkingEventListReq</li>
  <li>APP_ParkingEventListClear</li>
  <li>API_SuperDownload</li>
  <li>API_ButtonMatch</li>
  <li>API_WpsConnect</li>
  <li>API_GetResolution</li>
  <li>API_SetLockFile</li>
  <li>APP_StopDownload</li>
  <li>API_SetRouterAuth</li>
  <li>API_GetRouterStatus</li>
  <li>API_UpdateCamera</li>
  <li>API_GetLegalInfo</li>
  <li>API_GetSdBadClus</li>
  <li>API_SetDefaultCfg</li>
  <li>API_SetUuid</li>
  <li>API_SetSn</li>
  <li>API_GetEachFileSize</li>
  <li>API_BanMaUnbind</li>
  <li>API_BanMaSync</li>
  <li>API_SetApMode</li>
  <li>APP_EquipTestReady</li>
  <li>API_HwinfoQuery</li>
  <li>API_EquipAudioLoop</li>
  <li>API_EquipGetTime</li>
  <li>API_EquipLED</li>
  <li>API_EquipButtonMatch</li>
  <li>API_SetTestResult</li>
  <li>API_EquipGSensor</li>
  <li>API_EquipSpeaker</li>
  <li>API_EquipResetBtn</li>
  <li>API_EquipPhotoBtn</li>
  <li>API_EquipMuteBtn</li>
  <li>API_EquipMuteBtn</li>
  <li>API_EquipResetCfg</li>
  <li>API_EquipLegalSet</li>
  <li>API_EquipGetSensorVer</li>
  <li>API_EquipOpenRtsp</li>
  <li>API_RecordOpt</li>
  <li>API_GetGsensorState</li>
  <li>API_EquipACCState</li>
  <li>API_EquipGetTempetureAndHumidity</li>
  <li>API_EquipGetWiFiStatus</li>
  <li>API_EquipDeleteFacUsbFile</li>
  <li>API_EquipODBTest</li>
  <li>API_SetGsensorValue</li>
  <li>API_SetAudioCapGain</li>
  <li>API_SetBitRate1</li>
  <li>API_SetBitRate2</li>
  <li>API_SetBitRate3</li>
  <li>API_SetBitRate4</li>
  <li>API_SetBitRate5</li>
  <li>API_SetBitRate6</li>
  <li>API_SetBitRate7</li>
  <li>API_SetBitRate8</li>
  <li>API_SetBitRate9</li>
  <li>API_SetBitRate10</li>
  <li>API_SetBitRate11</li>
  <li>API_SetBitRate12</li>
  <li>API_SetBitRate13</li>
  <li>API_SetBitRate14</li>
  <li>API_SetBitRate15</li>
  <li>API_SetBitRate16</li>
  <li>API_SetBitRate17</li>
  <li>API_SetBitRate18</li>
  <li>API_GetAispeechState</li>
  <li>API_SetSpeakRange</li>
  <li>API_SetEmmcMeasure</li>
  <li>API_GetEmmcMeasure</li>
  <li>API_Get_ConnectAccStatus</li>
  <li>API_Get_PageFileListStatus</li>
  <li>API_SetTarCamlog</li>
  <li>API_GetCarCustomVersion</li>
  <li>API_SetPowerOff</li>
</ul>

<p>This is fun… !!!</p>]]></content><author><name></name></author><category term="Reverse Engineering" /><summary type="html"><![CDATA[I have been looking for a good mid range Dash cam for my car. I was thinking to integrate this to my custom build infotainment system. For this, there need to be some option to get live stream. I bought this DDPAI Mini Car Dash Camera from Amazon Link (Official site Link), but I was not sure whether I can access the live stream or not. The product looks good, companion app works smooth also, and there is live stream in the app. My goal was to figure out a way to get live stream so that I can use it in my program. May be have a look at it’s firmware and do some little hack if possible.]]></summary></entry><entry><title type="html">Smart Home Display IOT</title><link href="https://www.eionix.co.in/2019/06/29/smart-home-display-iot-diy-google-home-hub.html" rel="alternate" type="text/html" title="Smart Home Display IOT" /><published>2019-06-29T00:00:00+05:30</published><updated>2019-06-29T00:00:00+05:30</updated><id>https://www.eionix.co.in/2019/06/29/smart-home-display-iot--diy-google-home-hub</id><content type="html" xml:base="https://www.eionix.co.in/2019/06/29/smart-home-display-iot-diy-google-home-hub.html"><![CDATA[<p>This is a DIY smart display that you can embed in to your wall. You can control your smart appliance, set timer to control it, get weather info, and act as a cool clock. Let’s get straight into how I made it.</p>

<p><img src="/assets/img/thumbnail_smart_room.jpeg" alt="preview" /></p>

<h2 id="architecture">Architecture</h2>

<video autoplay="" loop="" muted="" playsinline="" width="600px" preload="none">
  <source src="/assets/res/exploded_view.mp4" type="video/mp4" />
</video>

<h3 id="hardware">Hardware</h3>

<p>It consists of</p>

<ul>
  <li>Frame
    <ul>
      <li>Front panel</li>
      <li>Back panel</li>
      <li>Processing Unit Cover</li>
      <li>Relay Cover</li>
    </ul>
  </li>
  <li>Display (7 inch 800x480 resolution)</li>
  <li>Processing Unit - Raspberry Pi</li>
  <li>Relay circuit (4 channel)</li>
</ul>

<p>Panel and display are snapped together. Processing Unit and display are secured using screws. Processing unit and relay cover are attached using 3 mm screws.</p>

<h3 id="software">Software</h3>

<p>Chromium-browser is used in a kiosk mode where it render the UI from a backend server. Python with the help of Flask to serve both static pages and a REST API service. JS will invoke REST APIs to control and view stats of appliances.</p>

<p><img src="/assets/img/arch_smart_room.png" alt="architecture" /></p>

<h4 id="rest-api-service">REST API Service</h4>

<ol>
  <li>
    <p>List room names</p>

    <p>GET /api/</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     {
     "rooms":["room1","room2"]
     }
</code></pre></div>    </div>
  </li>
  <li>
    <p>List all appliances in a given room</p>

    <p>GET /api/{room_name}</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     {
       "Fan 1": {
         "power-control": {
           "enabled": true, 
           "level": 100
         }, 
         "status": true, 
         "timer": -1, 
         "type": "fan"
       }, 
       "Light 1": {
         "power-control": {
           "enabled": false, 
           "level": 100
         }, 
         "status": true, 
         "timer": -1, 
         "type": "light"
       }, 
       "Light 2": {
         "power-control": {
           "enabled": false, 
           "level": 100
         }, 
         "status": true, 
         "timer": -1, 
         "type": "light"
       }
     }
</code></pre></div>    </div>
  </li>
  <li>
    <p>Change appliance properties</p>

    <p>POST /api/{room_name}/{appliance_name}</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     {
     "status":true,
     "timer":10,
     "power-control":{
             "level":50
             }
     }
</code></pre></div>    </div>
  </li>
  <li>
    <p>Scan wifi APs</p>

    <p>GET /api/wifi_scan</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     {
       "result":["WiFi-1","WiFi-2"]
     }
</code></pre></div>    </div>
  </li>
  <li>
    <p>Connect to an AP</p>

    <p>POST /wifi_connect</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     {
       "ssid":"WiFi-1",
       "passkey":"password"
     }
</code></pre></div>    </div>
  </li>
  <li>
    <p>Disconnect already established connection</p>

    <p>POST /api/wifi_disconnect</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     {
     }
</code></pre></div>    </div>
  </li>
  <li>
    <p>Get current ip</p>

    <p>GET /api/ip</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     {
       "ip": "192.168.1.5"
     }
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="ui-features">UI features</h2>

<p>These shows the features that are supported.</p>

<video autoplay="" loop="" muted="" playsinline="" width="600px" preload="none">
  <source src="/assets/res/smart_home_soft_preview.mp4" type="video/mp4" />
</video>

<h2 id="cad-design">CAD Design</h2>

<p>I have used fusion 360 to model the parts.</p>

<video autoplay="" loop="" muted="" playsinline="" width="600px" preload="none">
  <source src="/assets/res/cad_design_overlay.mp4" type="video/mp4" />
</video>

<h2 id="3d-printing">3D printing</h2>

<p>Thanks to <a href="https://www.linkedin.com/in/sumitgoyal11/">Sumit Goyal</a> for helping out with 3D printing and beautifully painting the parts.</p>

<p><img src="/assets/img/3D_part1.jpg" alt="preview" />
<img src="/assets/img/3D_part2.jpg" alt="preview" /></p>

<h2 id="final-preview">Final preview</h2>

<p><img src="/assets/img/preview_smart_home.jpg" alt="preview" />
<img src="/assets/img/preview.jpeg" alt="preview" /></p>]]></content><author><name></name></author><category term="IOT" /><category term="Product Design" /><category term="Pi" /><summary type="html"><![CDATA[This is a DIY smart display that you can embed in to your wall. You can control your smart appliance, set timer to control it, get weather info, and act as a cool clock. Let’s get straight into how I made it.]]></summary></entry><entry><title type="html">Raspberry pi Tips and Tricks</title><link href="https://www.eionix.co.in/2019/06/04/raspberry-pi-tips-and-tricks.html" rel="alternate" type="text/html" title="Raspberry pi Tips and Tricks" /><published>2019-06-04T00:00:00+05:30</published><updated>2019-06-04T00:00:00+05:30</updated><id>https://www.eionix.co.in/2019/06/04/raspberry-pi-tips-and-tricks</id><content type="html" xml:base="https://www.eionix.co.in/2019/06/04/raspberry-pi-tips-and-tricks.html"><![CDATA[<p>If you ever worked with raspberry pi, you know how many times you need google around to find a particular sulution. From enabling ssh first time to enabling uart speed, you need to google around and find the soulution that really works. This is a list of frequent things you may need to configure in raspberry pi. This assumes you are running Raspbian Stretch with desktop.</p>

<h2 id="enable-ssh">Enable ssh</h2>

<p>create an empty file in
<code class="language-plaintext highlighter-rouge">/boot/ssh</code></p>

<h2 id="connect-to-wifi-on-boot">Connect to WiFi on boot</h2>

<p><code class="language-plaintext highlighter-rouge">sudo nano /etc/wpa_supplicant/wpa_supplicant.conf</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=GB



network={
        ssid="insert_your_hidden_SSID_here"
        scan_ssid=1
        psk="insert_your_wifi_password_here"
        key_mgmt=WPA-PSK
}
</code></pre></div></div>

<h2 id="disable-rainbow-screen">Disable rainbow screen</h2>

<p><code class="language-plaintext highlighter-rouge">sudo nano /boot/config.txt</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>disable_splash=1
</code></pre></div></div>

<h2 id="disable-boot-logs">Disable boot logs</h2>

<p><code class="language-plaintext highlighter-rouge">sudo nano /boot/cmdline.txt</code></p>

<p>Change the console from tty1 to</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console=tty3 
</code></pre></div></div>

<p>Add this to the end of the line. <code class="language-plaintext highlighter-rouge">'loglevel=0'</code> removes most of the messages from the boot. You can also use <code class="language-plaintext highlighter-rouge">'loglevel=3'</code>, but some boot messages may re-appear.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>quiet splash loglevel=0 logo.nologo vt.global_cursor_default=0
</code></pre></div></div>

<p>If you are going to use Plymouth add this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plymouth.ignore-serial-consoles 
</code></pre></div></div>

<h2 id="change-boot-animation">Change boot animation</h2>
<p>Change raspbian plymouth theme</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /usr/share/plymouth/themes/
</code></pre></div></div>

<p>Clone this repository.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo git clone https://github.com/krishnan793/PlymouthTheme-TheRun.git
</code></pre></div></div>

<p>Install the theme.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo update-alternatives --install /usr/share/plymouth/themes/default.plymouth default.plymouth /usr/share/plymouth/themes/PlymouthTheme-TheRun/PlymouthTheme-TheRun.plymouth 100
</code></pre></div></div>

<p>Select the default theme.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo update-alternatives --config default.plymouth
</code></pre></div></div>

<p>Update the initramfs image.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo update-initramfs -u
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">sudo nano /etc/plymouth/plymouthd.conf</code></p>

<p>Theme=pix to</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Theme=PlymouthTheme-TheRun
</code></pre></div></div>

<h2 id="waveshare-7-inch-display">Waveshare 7 inch display</h2>

<p><code class="language-plaintext highlighter-rouge">sudo nano /boot/config.txt</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hdmi_force_hotplug=1
config_hdmi_boost=0
overscan_left=0
overscan_right=0
overscan_top=0
overscan_bottom=0
disable_overscan=0
hdmi_cvt=1024 600 60 6 ##
framebuffer_width=1024 ##
framebuffer_height=600 ##
hdmi_group=2
hdmi_mode=1
hdmi_mode=87
</code></pre></div></div>

<h2 id="rotate-display">Rotate display</h2>

<p><code class="language-plaintext highlighter-rouge">sudo nano /boot/config.txt</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lcd_rotate=2 
</code></pre></div></div>
<p>or</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>display_rotate=0 
</code></pre></div></div>

<ul>
  <li>display_rotate=0 Normal</li>
  <li>display_rotate=1 90 degrees</li>
  <li>display_rotate=2 180 degrees</li>
</ul>

<h2 id="set-display-brightness">Set display brightness</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo echo 50 &gt; /sys/class/backlight/rpi_backlight/brightness
</code></pre></div></div>

<p>To make it persistent add the above statement in <code class="language-plaintext highlighter-rouge">/etc/rc.local</code> (before exit 0)</p>

<h2 id="switch-off-display">Switch off display</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo echo 1 &gt; /sys/class/backlight/rpi_backlight/b1_power
</code></pre></div></div>

<h2 id="switch-on-display">Switch on display</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo echo 0 &gt; /sys/class/backlight/rpi_backlight/b1_power
</code></pre></div></div>

<h2 id="to-remove-low-power-indication-lightning-icon">To remove low power indication (lightning icon)</h2>

<p><code class="language-plaintext highlighter-rouge">sudo nano /boot/config.txt</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>avoid_warnings=1
</code></pre></div></div>

<h2 id="hide-cursor">Hide cursor</h2>

<p>sudo nano <code class="language-plaintext highlighter-rouge">/etc/lightdm/lightdm.conf</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Seat:*]
xserver-command=X -nocursor 
</code></pre></div></div>

<h2 id="start-app-in-fullscreen-with-desktop-on-boot">Start app in fullscreen with desktop on boot</h2>

<p>Make sure you enable auto login using <code class="language-plaintext highlighter-rouge">sudo raspi-config</code></p>

<p>sudo nano <code class="language-plaintext highlighter-rouge">/etc/xdg/autostart/smart_room.desktop</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Desktop Entry]
Type=Application
Name=smart_room
Comment=Kivy RPI Infoscreen
NoDisplay=false
Exec=chromium-browser http://192.168.1.5/src/home.html --start-fullscreen
NotShowIn=GNOME;KDE;XFCE;
</code></pre></div></div>

<h2 id="start-app-in-fullscreen-without-desktop-on-boot">Start app in fullscreen without desktop on boot</h2>

<p>Make sure you enable auto login using <code class="language-plaintext highlighter-rouge">sudo raspi-config</code></p>

<p><code class="language-plaintext highlighter-rouge">sudo nano /etc/lightdm/lightdm.conf</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Seat:*]
user-session=myxclient
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">sudo nano /usr/share/xsessions/myxclient.desktop</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Desktop Entry]
Type=Application
Name=smart_room
Comment=Kivy RPI Infoscreen
NoDisplay=false
Exec=/home/pi/start.sh
NotShowIn=GNOME;KDE;XFCE;
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">sudo nano /home/pi/start.sh</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash
/usr/bin/chromium-browser --kiosk --app=https://www.google.com --start-fullscreen --window-size=1024,600 --window-position=0,0
</code></pre></div></div>

<h2 id="uart">UART</h2>

<p>The SoCs used on the Raspberry Pis have two built-in UARTs, a PL011 and a mini UART. both are 3.3V devices. By default, on Raspberry Pis equipped with the wireless/Bluetooth module (Raspberry Pi 3 and Raspberry Pi Zero W), the PL011 UART is connected to the Bluetooth module, while the mini UART is used as the primary UART and will have a Linux console on it. On all other models, the PL011 is used as the primary UART.</p>

<p>For pi3 &amp; zero</p>

<ul>
  <li>/dev/ttyS0 (mini UART) primary UART  symlink to /dev/serial0</li>
  <li>/dev/ttyAMA0 (PL011) bluetooth module symlink to /dev/serial1</li>
</ul>

<p>The baud rate of the mini UART is linked to the core frequency of the VPU (VideoCore processor) on the VC4 GPU.</p>

<p>Steps to enable mini UART</p>

<ol>
  <li>add <code class="language-plaintext highlighter-rouge">enable_uart=1</code> in <code class="language-plaintext highlighter-rouge">/boot/config.txt</code></li>
  <li>remove <code class="language-plaintext highlighter-rouge">console=serial0</code> from <code class="language-plaintext highlighter-rouge">/boot/cmdline.txt</code></li>
</ol>

<p>default baud rate is: 115200</p>]]></content><author><name></name></author><category term="Linux" /><category term="Pi" /><summary type="html"><![CDATA[If you ever worked with raspberry pi, you know how many times you need google around to find a particular sulution. From enabling ssh first time to enabling uart speed, you need to google around and find the soulution that really works. This is a list of frequent things you may need to configure in raspberry pi. This assumes you are running Raspbian Stretch with desktop.]]></summary></entry><entry><title type="html">Blog using Jekyll | Github Pages with custom domain</title><link href="https://www.eionix.co.in/2019/04/14/create-a-blog-with-custom-domain-and-host-using-github.html" rel="alternate" type="text/html" title="Blog using Jekyll | Github Pages with custom domain" /><published>2019-04-14T00:00:00+05:30</published><updated>2019-04-14T00:00:00+05:30</updated><id>https://www.eionix.co.in/2019/04/14/create-a-blog-with-custom-domain-and-host-using-github</id><content type="html" xml:base="https://www.eionix.co.in/2019/04/14/create-a-blog-with-custom-domain-and-host-using-github.html"><![CDATA[<p>This post talks about how you can setup a blog using Jekyll and host it using
GitHub. Jekyll offers simple and blog-aware, static site generation. Jekyll
takes your content, renders Markdown and Liquid templates, and spits out a
complete, static website ready to be served by Apache, Nginx or another web
server.</p>

<p><img src="/assets/img/Github_Jekyll.jpeg" alt="Github_Jekyll" /></p>

<p>First you have to cerate a layout for your pages. Consider it as a template.
For example all your posts can have one template. Then your home page and about
page have a different template. Then all contents, you can write in a
markdown format (you can also use HTML). If you want to create a post, you write
it in a plain text using markdown and then save those in /_posts folder. You
will specify which layout to use in this file. Then you compile your site
using Jekyll. Jekyll will automatically create HTML files and folder structure
for you. You can create layouts and templates so that Jekyll will
automatically create pagination, organize your posts based on tags, etc. Once
you have your setup, then it is pretty straight forward and easy to maintain.</p>

<p>GitHub supports hosting web contents on GitHub. If you have a repository, then
you can create a folder called Docs and upload all your html files in it.
After enabling GitHub pages, you can browse to
<code class="language-plaintext highlighter-rouge">https://&lt;username&gt;.github.io/repository</code>. If the repository name itself is
<code class="language-plaintext highlighter-rouge">&lt;username&gt;.github.io</code>, then you can host your html files in the root folder
and it will be available at <code class="language-plaintext highlighter-rouge">https://&lt;username&gt;.github.io/</code>.</p>

<p>GitHub also supports Jekyll directly. This means you do not need to compile
and then upload HTML files to your repository. GitHub will do that for you.
One disadvantage of this is that, GitHub only supports a handful of Jekyll
plug-ins. If you are planning to customize your blog down to every detail,
and need to include some fancy modifications, then better compile locally and
host it on GitHub.</p>

<p>I started by hosting Jekyll files directly and let GitHub compiled for me.
Then I changed to uploading compiled HTML files directly to GitHub. The best
part is, if you have a custom domain, (like www.eionix.co.in) then you can point
this directly to your GitHub page. Now GitHub support HTTPS. This means even
if you don’t have an HTTPS certificate for you domain, GitHub will give one
for you completely free. Cool!!! So you can go to <code class="language-plaintext highlighter-rouge">https://yourdomain.co.in</code>
and GitHub will serve you the blog.</p>

<h2 id="creating-blog-using-jekyll">Creating Blog using Jekyll</h2>

<p>Let’s start. Following instructions are for Ubuntu (Linux). If you are having
a different distro or OS, refer <a href="https://jekyllrb.com/docs/installation/">Link</a>. These steps were
taken directly from Jekyll docs. For any queries, refer <a href="https://jekyllrb.com/docs/">Link</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>ruby-full build-essential zlib1g-dev
<span class="nb">echo</span> <span class="s1">'# Install Ruby Gems to ~/gems'</span> <span class="o">&gt;&gt;</span> ~/.bashrc
<span class="nb">echo</span> <span class="s1">'export GEM_HOME="$HOME/gems"'</span> <span class="o">&gt;&gt;</span> ~/.bashrc
<span class="nb">echo</span> <span class="s1">'export PATH="$HOME/gems/bin:$PATH"'</span> <span class="o">&gt;&gt;</span> ~/.bashrc
<span class="nb">source</span> ~/.bashrc
gem <span class="nb">install </span>jekyll bundler
</code></pre></div></div>

<p>Create your blog</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll new myblog
<span class="nb">cd </span>myblog
bundle <span class="nb">exec </span>jekyll serve
</code></pre></div></div>

<p>Your site is ready. Go to <a href="http://localhost:4000">http://localhost:4000</a> and
you can view your blog.</p>

<p>A complete Jekyll folder structure will look like this.</p>

<ul>
  <li>/_draft</li>
  <li>/_includes</li>
  <li>/_layouts</li>
  <li>/_posts</li>
  <li>/_site</li>
  <li>/assets</li>
  <li>/404.html</li>
  <li>/about.md</li>
  <li>/_config.yml</li>
  <li>/Gemfile</li>
  <li>/Gemfile.lock</li>
  <li>/index.md</li>
</ul>

<p>Create a file with following format <code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code> inside <code class="language-plaintext highlighter-rouge">/_posts</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /_posts
nano 2019-04-14-my-first-post.md
</code></pre></div></div>

<p>Type following contents to the file. For a complete reference of markdown,
refer <a href="Markdown_Reference">Markdown_Reference</a>.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="na">author</span><span class="pi">:</span> <span class="s">eionix</span>
<span class="nn">---</span>
my first post
</code></pre></div></div>

<p>Go to root folder and build it.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">exec </span>jekyll serve
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">jekyll serve</code> will automatically build if you have any changes (except
changes in _config.yml). In that case use <code class="language-plaintext highlighter-rouge">bundle exec jekyll build</code></p>

<h3 id="export-your-old-blog-to-jekyll">Export your old blog to Jekyll</h3>

<p>If you are migrating from an existing framework like Google’s Blogger, you can
directly convert your existing posts. First export your old blog into an xml
file. If you were using Blogger, there is an option to export under blog
settings. After exporting copy the xml file to the root folder and type this
command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruby <span class="nt">-r</span> rubygems <span class="nt">-e</span> <span class="s1">'require "jekyll-import";
    JekyllImport::Importers::Blogger.run({
      "source"                =&gt; "/path/to/blog-MM-DD-YYYY.xml",
      "no-blogger-info"       =&gt; false, # not to leave blogger-URL info (id and old URL) in the front matter
      "replace-internal-link" =&gt; false, # replace internal links using the post_url liquid tag.
    })'</span>
</code></pre></div></div>

<p>Mind you that, you may require to modify those files later. (can cause slight layout issues)</p>

<h2 id="hosting-the-site-in-github">Hosting the site in GitHub</h2>

<p>Now create a repository in GitHub with name <code class="language-plaintext highlighter-rouge">&lt;username&gt;.github.io</code>. Now git
init either root folder or _posts folder. If you init root folder github will
build your site for you. If you git init _sites folder, you are directly
uploading compiled files. <em>If you are hosting compiled HTML files, run this
before uploading.</em></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">JEKYLL_ENV</span><span class="o">=</span>production bundle <span class="nb">exec </span>jekyll serve
</code></pre></div></div>

<p>This will build HTML files for production environment.</p>

<p><img src="/assets/img/create_repo.png" alt="Create repository" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"first commit"</span>
git remote add origin https://github.com/&lt;username&gt;/&lt;username.github.io&gt;.git
git push <span class="nt">-u</span> origin master
</code></pre></div></div>

<p>You can now test your blog at <code class="language-plaintext highlighter-rouge">https://&lt;username.github.io&gt;</code>. It will take
some time to reflect the changes. If you upload root folder, github will now
compile that into html files. Otherwise the compiled files will be directly
available at the url.</p>

<h2 id="adding-custom-domain">Adding custom domain</h2>

<p>Now if you have a custom domain like ‘www.yourdomain.co.in’, then you can
point this to your blog rather than <code class="language-plaintext highlighter-rouge">https://&lt;username.github.io&gt;</code>. Also you
can make it <code class="language-plaintext highlighter-rouge">https://</code>. So your blog url becomes
<code class="language-plaintext highlighter-rouge">https://www.yourdomain.co.in</code>.</p>

<p>Go to GitHub repository settings and add the custom domain.</p>

<p><img src="/assets/img/add_custom_domain.png" alt="adding custom domain" /></p>

<p>This will add a CNAME file at the root of your repository</p>

<p>Now you need to update your DNS records to point to GitHub. GO to your domain
registrar (like godaddy, etc) and change the DNS A record to following
entries. Always refer this link
<a href="https://help.github.com/en/articles/setting-up-an-apex-domain">https://help.github.com/en/articles/setting-up-an-apex-domain</a>
to make sure following are the updated DNS records.</p>

<ul>
  <li>185.199.108.153</li>
  <li>185.199.109.153</li>
  <li>185.199.110.153</li>
  <li>185.199.111.153</li>
</ul>

<p><img src="/assets/img/dns_record.png" alt="dns record" /></p>

<p>Now add these CNAME records</p>

<p><img src="/assets/img/cname_record.png" alt="cname record" /></p>

<p>Your blog will now be able to access using custom domain id
<code class="language-plaintext highlighter-rouge">https://www.yourdomain.co.in</code>. It will take some time to reflect the changes.</p>

<p>If you add <code class="language-plaintext highlighter-rouge">/_posts</code> as the GitHub repository root folder, you can create a
new repository at root level for your blogs source file. This will seperate
your blog into two repository. One will have source files which you can make
private and one with the build files.</p>

<p>Now you can advance and edit and customize layouts to suit your needs.</p>

<p>Happy blogging !!!</p>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="Jekyl_Installation">Jekyl_Installation</a></li>
  <li><a href="Jekyl_Docs">Jekyl_Docs</a></li>
  <li><a href="Markdown_Reference">Markdown_Reference</a></li>
  <li><a href="GitHub_DNS_Link">GitHub_DNS_Link</a></li>
  <li><a href="Jekyll_Adding_Layouts">Jekyll_Adding_Layouts</a></li>
</ul>]]></content><author><name></name></author><category term="Blogging" /><summary type="html"><![CDATA[This post talks about how you can setup a blog using Jekyll and host it using GitHub. Jekyll offers simple and blog-aware, static site generation. Jekyll takes your content, renders Markdown and Liquid templates, and spits out a complete, static website ready to be served by Apache, Nginx or another web server.]]></summary></entry><entry><title type="html">Product Design of a 4 wheel differential drive robot</title><link href="https://www.eionix.co.in/2019/01/09/product-design-of-4-wheel-differential.html" rel="alternate" type="text/html" title="Product Design of a 4 wheel differential drive robot" /><published>2019-01-09T12:35:00+05:30</published><updated>2019-01-09T12:35:00+05:30</updated><id>https://www.eionix.co.in/2019/01/09/product-design-of-4-wheel-differential</id><content type="html" xml:base="https://www.eionix.co.in/2019/01/09/product-design-of-4-wheel-differential.html"><![CDATA[<p>I have been thinking of creating a small mobile robot from scratch. From scratch means, go through all the steps of a product development. Design the overall architecture, design the circuits, make 3D model of the parts, 3D print the parts and finally integrate with ROS.</p>

<iframe width="320" height="266" src="https://www.youtube.com/embed/Q5mC5lRfhfw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>The methods I followed may not be the best practice. The only aim is to reach from idea to actual product (prototype).</p>

<p><img src="/assets/img/dest.jpeg" alt="Thumbnail" /></p>

<h2 id="features">Features</h2>

<ul>
  <li>4 Wheel Differential Drive</li>
  <li>Camera</li>
  <li>WiFi</li>
  <li>IMU</li>
  <li>GPS(optional)</li>
</ul>

<h2 id="overview">Overview</h2>

<p>A 4 wheeled differential mobile robot with wheel encoders, camera, WiFi, IMU and GPS(optional). The first thing I did was to come up with an overall architecture. Raspberry pi 3 will be the heart of the robot. Pi Zero was considered in the beginning, but eventually had to  change because of the lack of support for ROS. Even though able to compile ROS from scratch, it became so hard to compile other packages needed for the project. Since I do not want to use pi to directly control motors, I had to design a separate controller circuit to handle motors. Encoder was later discarded to make the project simple. Controller circuit will talk with pi using i2c. Atmega328p is used for the controller circuit. IMU will also communicate with pi using i2c.</p>

<h2 id="architecture">Architecture</h2>

<p><img src="https://1.bp.blogspot.com/-vdBU-uljYjg/XA0lgtgnTkI/AAAAAAAABjI/Aw2r9m2bjY4nAorFAxHD-OWNnOM5bk1CwCK4BGAYYCw/s1600/architectureV2.png" alt="Device architecture" /><br />
Selected N20 DC12V 300RPM motor for driving the robot. With a rated torque of 0.4 Kg/cm, it was more than enough to drive the robot since expected overall weight of robot will not cross 1 Kg. Selected a battery with voltage 11.1 which is enough for the motors. A voltage regulator is needed to power Pi and motor circuits. Atmega328P is selected for the controller circuit. It has enough internal PWM to drive 4 motors. Since I had to make the controller circuit as small as possible, I was searching for SMD components. Found one SMD package for l293D which is enough to drive the motor with a stall current 300 mA. In order to keep track of current, I selected ACS712. For measuring internal temperature, LM35 was selected.</p>

<h2 id="specifications">Specifications</h2>

<h3 id="motor">Motor</h3>

<p>Name: N20 DC12V 300RPM Mini Metal Gear Motor (12GAN20)<br />
shop: banggood<br />
<img src="https://img.staticbg.com/thumb/view/oaupload/banggood/images/56/0F/20d5045b-fa8d-404d-983e-cfc1e1423971.jpg" alt="N20 DC12V Motor" width="150px" /></p>

<table>
  <tbody>
    <tr>
      <td>Rated voltage</td>
      <td>DC 12V</td>
    </tr>
    <tr>
      <td>Speed</td>
      <td>300 RPM</td>
    </tr>
    <tr>
      <td>Shaft Diameter</td>
      <td>3mm</td>
    </tr>
    <tr>
      <td>Diameter</td>
      <td>12mm</td>
    </tr>
    <tr>
      <td>fuselage without shaft length</td>
      <td>26mm</td>
    </tr>
    <tr>
      <td>Output axial length</td>
      <td>10mm</td>
    </tr>
    <tr>
      <td>Screw</td>
      <td>M3</td>
    </tr>
    <tr>
      <td>Quantity</td>
      <td>4pcs</td>
    </tr>
  </tbody>
</table>

<table>
  <tbody>
    <tr>
      <td> </td>
      <td> </td>
      <td>Non-loaded</td>
      <td>Non-loaded</td>
      <td>Rated load</td>
      <td>Rated load</td>
      <td>Rated load</td>
      <td>stall</td>
      <td>stall</td>
    </tr>
    <tr>
      <td>Voltage range (V)</td>
      <td>Rated voltage</td>
      <td>speed(RPM)</td>
      <td>current(A)</td>
      <td>speed(RPM)</td>
      <td>current(A)</td>
      <td>torque(KG.CM)</td>
      <td>torque(KG.CM)</td>
      <td>current(A)</td>
    </tr>
    <tr>
      <td>6-12</td>
      <td>12</td>
      <td>300</td>
      <td>0.05</td>
      <td>240</td>
      <td>0.09</td>
      <td>0.6</td>
      <td>4.00</td>
      <td>0.3</td>
    </tr>
  </tbody>
</table>

<h2 id="main-computer">Main computer</h2>

<p>Name: Raspberry Pi 3 Model B+</p>

<table>
  <tbody>
    <tr>
      <td>Processor</td>
      <td>Broadcom BCM2837B0, Cortex-A53 64-bit SoC @ 1.4GHz 1GB</td>
    </tr>
    <tr>
      <td>Memory</td>
      <td>LPDDR2 SDRAM</td>
    </tr>
    <tr>
      <td>Connectivity</td>
      <td>2.4GHz and 5GHz IEEE 802.11.b/g/n/ac wireless LAN, Bluetooth 4.2, BLE Gigabit Ethernet over USB 2.0 (maximum throughput 300Mbps)</td>
    </tr>
    <tr>
      <td>Access</td>
      <td>4 × USB 2.0 ports Extended 40-pin GPIO header</td>
    </tr>
    <tr>
      <td>Video &amp; sound</td>
      <td>1 × full size HDMI MIPI DSI display port MIPI CSI camera port 4 pole stereo output and composite video port H.264, MPEG-4 decode (1080p30); H.264 encode (1080p30); OpenGL ES 1.1, 2.0 graphics</td>
    </tr>
    <tr>
      <td>Multimedia: SD card support</td>
      <td>Micro SD format for loading operating system and data storage 5V/2.5A DC via micro USB connector 5V DC via GPIO header Power over Ethernet (PoE)–enabled (requires separate PoE HAT)</td>
    </tr>
    <tr>
      <td>Operating temperature</td>
      <td>0–50°C</td>
    </tr>
    <tr>
      <td>Production lifetime</td>
      <td>The Raspberry Pi 3 Model B+ will remain in production until at least January 2023</td>
    </tr>
  </tbody>
</table>

<h3 id="dimension">Dimension</h3>

<p><img src="https://d2mxuefqeaa7sj.cloudfront.net/s_7DE74831DB2CB5D12B9EF081E317660A0AD9BDC05CFC157FD2EEC025DFA2B08F_1537454051611_Dimension_pi_3B.png" alt="Raspberry pi Dimension" /></p>

<p>Schematics: <a href="Pi_3_Schematics">Link</a><br />
OS: Ubuntu MATE 16.04.2 (Xenial)<br />
Installation steps: <a href="Ubuntu_Xenial">Link</a></p>

<h2 id="temperature-sensor">Temperature sensor</h2>

<ul>
  <li>Name: LM35</li>
  <li>Linear + 10-mV/°C Scale Factor</li>
  <li>0.5°C Ensured Accuracy (at 25°C)</li>
  <li>Rated for Full −55°C to 150°C Range</li>
  <li>Operates From 4 V to 30 V</li>
  <li>Less Than 60-μA Current Drain</li>
  <li>Low-Impedance Output, 0.1 Ω for 1-mA Load</li>
</ul>

<h2 id="current-sensor">Current sensor</h2>

<ul>
  <li>Name: ACS712ELCTR-05B-T</li>
  <li>Small footprint, low-profile SOIC8 package</li>
  <li>1.2 mΩ internal conductor resistance</li>
  <li>2.1 kVRMS minimum isolation voltage from pins 1-4 to pins 5-8</li>
  <li>5.0 V, single supply operation</li>
  <li>66 to 185 mV/A output sensitivity</li>
  <li>Optimized current range : ±5</li>
  <li>Sensitivity: 185 mV/A</li>
</ul>

<h2 id="schematics">Schematics</h2>

<p><img src="https://3.bp.blogspot.com/-ltmOj3ImY_c/XA0obzqc1WI/AAAAAAAABjk/yjIZtDElw-sZdqwQPbFVNOGLzJsy6ylQACK4BGAYYCw/s1600/l293dDIP.png" alt="Schematics" /></p>

<h2 id="pcb-layout">PCB Layout</h2>

<p>After finishing with the schematics and some initial breadboard prototyping, moved directly to pcb layout design.</p>

<p><img src="https://3.bp.blogspot.com/-DezjGJ_SHcI/XA0o5caOeeI/AAAAAAAABkA/Juk2RpCdC6shW60tUsURsg9wwfsovas4ACK4BGAYYCw/s320/PCB.png" alt="PCB layout 1" />
<img src="https://2.bp.blogspot.com/-4sMIbJJQNEg/XA0pM8i_JQI/AAAAAAAABkM/hdM7r4KppikvzGeKNzxFsOFUVwCFb4_TQCK4BGAYYCw/s320/PCB_3D.png" alt="PCB layout 2" />
<img src="https://4.bp.blogspot.com/-uwECuCmrtJY/XA0pQEiYN-I/AAAAAAAABkU/FYGH66JfuXAPCv-SISLX9Q-k-YhhE20agCK4BGAYYCw/s320/3D.png" alt="PCB layout 3" /></p>

<p>Since it is a 2 layer PCB, I had to order PCB from outside. LION circuits seemed to be a good choice. Apart from the fact that choosing colour of the PCB will cost you double, service seems to be good.</p>

<p><img src="https://1.bp.blogspot.com/-N62WiJrh15s/XA0tN2Pq4fI/AAAAAAAABk4/162FQDdpt5E5cRptGWjb4jaPOx2i3vsAgCK4BGAYYCw/s320/IMG_20181209_201406414.jpg" alt="PCB layout 4" />
<img src="https://4.bp.blogspot.com/-zK4L3x5m3m8/XA0tNuMiFzI/AAAAAAAABk0/_vXzsMxcZQAM6Nq9EPDOZ27-TA2sYkwNwCK4BGAYYCw/s320/IMG_20181209_201428683.jpg" alt="PCB layout 5" /></p>

<p>After an hour of hand soldering….</p>

<p><img src="https://1.bp.blogspot.com/-XbqHNzFl2Xc/XA0pokgXf9I/AAAAAAAABkk/2aKwySsZcCoBYx6omQfYQIaszk5RXtkkgCK4BGAYYCw/s320/image_preview.jpeg" alt="PCB layout 5" /></p>

<h2 id="cad-modelling">CAD Modelling</h2>

<p>I have used solidworks before. But for this project I tried fusion 360, which seems to be good. One weeks of YouTube tutorials was enough to get started. Had to redesign the model two times. But it was worth the effort.</p>

<p><img src="https://4.bp.blogspot.com/-xDXtBYaP2cM/XA0uYdfv0XI/AAAAAAAABlY/dipXTNpBL2s-OkwcCTqTMxvGJNAO947pgCK4BGAYYCw/s320/isometric.PNG" alt="Wireframe 1" />
<img src="https://1.bp.blogspot.com/-LkxivYLW3v0/XA0uWtX__UI/AAAAAAAABlQ/3xhBUE0vyGAvnIfSsR7WfT6URInOtfyvwCK4BGAYYCw/s320/Capture.PNG" alt="Wireframe 2" />
<img src="https://3.bp.blogspot.com/-Uit16dTn4AQ/XA0uUSH-zEI/AAAAAAAABlI/CspNW6kIvPgNk8G_aHn1ORaYRYBhU9qtACK4BGAYYCw/s320/dimension.PNG" alt="3D rendered" /></p>

<h2 id="3d-printing">3D printing</h2>

<p>I had two split the bottom body into two parts for easy 3D printing and later I glued it together.</p>

<h2 id="final-preview">Final Preview</h2>

<p><img src="https://2.bp.blogspot.com/-WD8crbpPltw/XDV8JLFuNuI/AAAAAAAABmc/I6uuc2be-TMI5iBj5Ktdb5BzC8ummmNGACK4BGAYYCw/s1600/BLR_0187.JPG" alt="Final preview 1" />
<img src="https://2.bp.blogspot.com/-CwnWzdCNKp4/XDV8GK2aPII/AAAAAAAABmM/Af5NH8mgFXg9qXIqmOyBulJxhSMVris-gCK4BGAYYCw/s1600/BLR_0188.JPG" alt="Final preview 2" />
<img src="https://2.bp.blogspot.com/-JmZFS9Xr9Rw/XDV8IzknhuI/AAAAAAAABmY/WyOmIdZc7wA6BxN0bmmMeyA7_r7GgqdXQCK4BGAYYCw/s1600/BLR_0189.JPG" alt="Final preview 3" />
<img src="https://4.bp.blogspot.com/-6fCIj7m0DmM/XDV8KaCT8sI/AAAAAAAABmk/DmUULnhi_zohNR0SUDEvtJTIqk9hFxTPQCK4BGAYYCw/s1600/BLR_0185.JPG" alt="Final preview 4" />
<img src="https://3.bp.blogspot.com/-vVNex884yb0/XDWae__435I/AAAAAAAABnM/k0EXHvjcIbQcI2Av7lzCG_pMhOuZnmbHACK4BGAYYCw/s1600/BLR_0001.JPG" alt="Final preview 5" /></p>

<iframe width="320" height="266" src="https://www.youtube.com/embed/Q5mC5lRfhfw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>]]></content><author><name>ANANTHAKRISHNAN</name></author><category term="Robotics" /><category term="Atmega328PU" /><category term="ROS" /><category term="Product Design" /><category term="Pi" /><summary type="html"><![CDATA[I have been thinking of creating a small mobile robot from scratch. From scratch means, go through all the steps of a product development. Design the overall architecture, design the circuits, make 3D model of the parts, 3D print the parts and finally integrate with ROS.]]></summary></entry><entry><title type="html">Inventory App for hobbyists</title><link href="https://www.eionix.co.in/2018/10/06/inventory-app-for-hobbyists.html" rel="alternate" type="text/html" title="Inventory App for hobbyists" /><published>2018-10-06T16:39:00+05:30</published><updated>2018-10-06T16:39:00+05:30</updated><id>https://www.eionix.co.in/2018/10/06/inventory-app-for-hobbyists</id><content type="html" xml:base="https://www.eionix.co.in/2018/10/06/inventory-app-for-hobbyists.html"><![CDATA[<p>I used to buy a lot of small electronics component and sometimes store it for future use. The problem is sometimes it is hard to keep track of what you have in your collection. I find it hard to find any free inventory app that does the job. There are pretty good paid software, if you want to use it for some shops/warehouse etc. So I made an app that does the job. It is build using nwjs framework.</p>

<p>You can find the whole source code + binaries on my github repository <a href="https://github.com/krishnan793/inventoryApp">link</a>.</p>

<h2 id="searching-the-inventory-item">Searching the inventory item</h2>

<p><img src="https://3.bp.blogspot.com/-ujdfbPOoH74/W7iWCTGLHRI/AAAAAAAABhc/15-iDI8ZrRY_o6AuO0wg4go0agqjb-nCgCK4BGAYYCw/s1600/search.gif" alt="Searching" /></p>

<h2 id="adding-entries">Adding entries</h2>

<p><img src="https://2.bp.blogspot.com/-W-m42a8tOOs/W7iWQB6zsVI/AAAAAAAABhk/E8RoMqfow8UYVnYsSLuq_ie09De2DzhNACK4BGAYYCw/s1600/addValue.gif" alt="Adding" /></p>

<h2 id="modify-entry">Modify entry</h2>

<p><img src="https://1.bp.blogspot.com/-G8ZBStXWYu0/W7iWZMv6eWI/AAAAAAAABhw/WrHfeUDLABAmWn4FUwSjTD32ZsX7u5tvgCK4BGAYYCw/s1600/change%2Bvalue.gif" alt="Modifying" /></p>

<h2 id="delete-entry">Delete entry</h2>

<p><img src="https://3.bp.blogspot.com/-AN3R868aGhU/W7iW75cVgpI/AAAAAAAABiM/fhFjztMe-h0iWSHJjKG6zEa7YifScPeIwCK4BGAYYCw/s320/delete.gif" alt="Deleting" /></p>]]></content><author><name>ANANTHAKRISHNAN</name></author><category term="Electronics" /><summary type="html"><![CDATA[I used to buy a lot of small electronics component and sometimes store it for future use. The problem is sometimes it is hard to keep track of what you have in your collection. I find it hard to find any free inventory app that does the job. There are pretty good paid software, if you want to use it for some shops/warehouse etc. So I made an app that does the job. It is build using nwjs framework.]]></summary></entry><entry><title type="html">Raspberry pi based Car Infotainment system</title><link href="https://www.eionix.co.in/2018/03/11/raspberry-pi-based-car-infotainment.html" rel="alternate" type="text/html" title="Raspberry pi based Car Infotainment system" /><published>2018-03-11T22:28:00+05:30</published><updated>2018-03-11T22:28:00+05:30</updated><id>https://www.eionix.co.in/2018/03/11/raspberry-pi-based-car-infotainment</id><content type="html" xml:base="https://www.eionix.co.in/2018/03/11/raspberry-pi-based-car-infotainment.html"><![CDATA[<p>Out in the market, there are a handful of car infotainment systems that you can buy for 10 to 30k INR. But nothing beats the thrill of making one from scratch and put it on your own car. So this is my effort to make one from the scratch.</p>

<p>At heart, it is a raspberry pi 3 Model B single board computer. For those who don’t know about raspberry pi, it is a single board compute with a Quad Core 1.2GHz Broadcom BCM2837 64bit CPU with on board WiFi and Bluetooth. See this for a complete spec. It is connected with a 7 inch multi touch display running Ubuntu Mate (a Linux variant). Os is modified so that it is only running the bare minimum services to run the system. It will save the boot up time and improve performance a little bit. It is connected to a GPS module via UART to get current location. It is used in the navigation section. It is also used to get time, when the device is not connected to internet. It uses google map API for navigation.</p>

<p>The complete infotainment system is build using nwjs (see link for a full description). It is an html + js + css + nodejs framework in which you can create cool independent apps using web technologies. There are famous apps that are built using these framework like atom editor, github-desktop (using electronjs but similar framework).</p>

<h3 id="hardware-info">Hardware Info:</h3>

<ul>
  <li>Quad Core 1.2GHz Broadcom BCM2837 64bit CPU</li>
  <li>ublox neo-6m GPS module</li>
  <li>7 inch Multi Touch Display</li>
  <li>JBL mini speaker</li>
</ul>

<h3 id="software-features">Software features</h3>

<ul>
  <li>Real time Navigation system with GPS</li>
  <li>Mean Sea Level Altitude info</li>
  <li>Music player</li>
  <li>YouTube player</li>
  <li>Google Map Location sharing to see friends/family in real time in the map</li>
  <li>Intuitive on screen keyboard</li>
  <li>Fast boot time (15 s)</li>
</ul>

<p>This video will show you the complete UI. It is a simulated setup to show all the options.</p>

<iframe width="320" height="266" src="https://www.youtube.com/embed/K3-xnHHL5cs" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>This video will show the whole system working in the actual hardware.</p>

<iframe width="320" height="266" src="https://www.youtube.com/embed/H9mrCXnhUEk" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>]]></content><author><name>ANANTHAKRISHNAN</name></author><category term="Linux" /><category term="Electronics" /><category term="Product Design" /><category term="Pi" /><summary type="html"><![CDATA[Out in the market, there are a handful of car infotainment systems that you can buy for 10 to 30k INR. But nothing beats the thrill of making one from scratch and put it on your own car. So this is my effort to make one from the scratch.]]></summary></entry><entry><title type="html">Creating a Wireless remote for Nikon Camera using Esp8266</title><link href="https://www.eionix.co.in/2017/08/03/creating-wireless-remote-for-nikon.html" rel="alternate" type="text/html" title="Creating a Wireless remote for Nikon Camera using Esp8266" /><published>2017-08-03T20:56:00+05:30</published><updated>2017-08-03T20:56:00+05:30</updated><id>https://www.eionix.co.in/2017/08/03/creating-wireless-remote-for-nikon</id><content type="html" xml:base="https://www.eionix.co.in/2017/08/03/creating-wireless-remote-for-nikon.html"><![CDATA[<p>The Nikon DSLR camera I own does have a Bluetooth connection, but unfortunately it is of no use. You cannot trigger shots from Bluetooth. Also u can only share photos of low resolution across Bluetooth. What a shame!!! I also want a time lapse option which is absent in the camera.
There is a WiFi option, but have to invest a lot more money to buy the WiFi adaptor. Fortunately it has an IR interface. So I thought of creating my own triggering device (like the ML-L3) which works over WiFi so that I can remotely trigger the shutter and also take time lapse pics.</p>

<iframe width="320" height="266" src="https://www.youtube.com/embed/7SlLCa77NC4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>I can control ESP over phone and ESP will in turn control the camera using IR. (It can also behave as a normal ML-L3 Wireless remote). I got the command sequence for taking shots from here <a href="https://www.bigmike.it/ircontrol/">https://www.bigmike.it/ircontrol/</a>. This is the code I wrote for controlling my DSLR.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;ESP8266WiFi.h&gt;</span><span class="cp">
</span>
<span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">ssid</span> <span class="o">=</span> <span class="s">"Nikon"</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">password</span> <span class="o">=</span> <span class="s">"password"</span><span class="p">;</span>

<span class="n">WiFiServer</span> <span class="nf">server</span><span class="p">(</span><span class="mi">80</span><span class="p">);</span>

<span class="kt">int</span> <span class="n">OutputPIN</span> <span class="o">=</span> <span class="n">D0</span><span class="p">;</span>
<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">seq</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2000</span><span class="p">,</span><span class="mi">27830</span><span class="p">,</span><span class="mi">400</span><span class="p">,</span><span class="mi">1580</span><span class="p">,</span><span class="mi">400</span><span class="p">,</span><span class="mi">3580</span><span class="p">,</span><span class="mi">400</span><span class="p">};</span>

<span class="kt">void</span> <span class="nf">setupWiFi</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">ESP</span><span class="p">.</span><span class="n">eraseConfig</span><span class="p">();</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">();</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"Configuring access point..."</span><span class="p">);</span>
  <span class="cm">/* You can remove the password parameter if you want the AP to be open. */</span>
  <span class="n">WiFi</span><span class="p">.</span><span class="n">softAP</span><span class="p">(</span><span class="n">ssid</span><span class="p">,</span> <span class="n">password</span><span class="p">);</span>

  <span class="n">IPAddress</span> <span class="n">myIP</span> <span class="o">=</span> <span class="n">WiFi</span><span class="p">.</span><span class="n">softAPIP</span><span class="p">();</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"AP IP address: "</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">myIP</span><span class="p">);</span>
  <span class="n">server</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Server started"</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> 
<span class="p">{</span>
  <span class="c1">// put your setup code here, to run once:</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">OutputPIN</span><span class="p">,</span><span class="n">OUTPUT</span><span class="p">);</span>
  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">OutputPIN</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
  <span class="n">setupWiFi</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">sendSignal</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">milliSec</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">noofRepetition</span> <span class="o">=</span> <span class="n">milliSec</span><span class="o">/</span><span class="p">(</span><span class="mi">15</span><span class="o">+</span><span class="mi">9</span><span class="p">);</span>

  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">noofRepetition</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">OutputPIN</span><span class="p">,</span><span class="n">HIGH</span><span class="p">);</span>
    <span class="n">delayMicroseconds</span><span class="p">(</span><span class="mi">15</span><span class="p">);</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">OutputPIN</span><span class="p">,</span><span class="n">LOW</span><span class="p">);</span>
    <span class="n">delayMicroseconds</span><span class="p">(</span><span class="mi">9</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">wait</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">milliSec</span><span class="p">){</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">microSec</span> <span class="o">=</span> <span class="n">milliSec</span><span class="o">%</span><span class="mi">1000</span><span class="p">;</span>
  <span class="n">delay</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)</span><span class="n">milliSec</span><span class="o">/</span><span class="mi">1000</span><span class="p">);</span>
  <span class="n">delayMicroseconds</span><span class="p">(</span><span class="n">milliSec</span><span class="o">%</span><span class="mi">1000</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">sendCommand</span><span class="p">()</span>
<span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="k">sizeof</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> 
  <span class="p">{</span>
    <span class="cm">/*Even places are 1 and odd places are 0*/</span>
    <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
      <span class="n">sendSignal</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="k">else</span>
      <span class="n">wait</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>    
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">takeSnap</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">sendCommand</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">timeSnap</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">shots</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">delayMilli</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="n">shots</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">return</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">shots</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">takeSnap</span><span class="p">();</span>
    <span class="n">delay</span><span class="p">(</span><span class="n">delayMilli</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> 
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">shots</span><span class="p">,</span><span class="n">delayMilli</span><span class="p">;</span>
  <span class="c1">// Check if a client has connected</span>
  <span class="n">WiFiClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">available</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">client</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="c1">// Wait until the client sends some data</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"new client"</span><span class="p">);</span>
  <span class="n">client</span><span class="p">.</span><span class="n">setNoDelay</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">client</span><span class="p">.</span><span class="n">available</span><span class="p">()){</span>
    <span class="n">delay</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="n">String</span> <span class="n">req</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">readStringUntil</span><span class="p">(</span><span class="sc">','</span><span class="p">);</span>
  <span class="n">shots</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span><span class="p">)</span><span class="n">req</span><span class="p">.</span><span class="n">toInt</span><span class="p">();</span>
 
  <span class="n">req</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">readStringUntil</span><span class="p">(</span><span class="sc">'\r'</span><span class="p">);</span>
  <span class="n">delayMilli</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span><span class="p">)(</span><span class="n">req</span><span class="p">.</span><span class="n">toInt</span><span class="p">()</span><span class="o">*</span><span class="mi">1000</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">shots</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">delayMilli</span><span class="p">);</span>
  <span class="n">client</span><span class="p">.</span><span class="n">flush</span><span class="p">();</span>
  <span class="n">timeSnap</span><span class="p">(</span><span class="n">shots</span><span class="p">,</span><span class="n">delayMilli</span><span class="p">);</span>
  
<span class="p">}</span>
</code></pre></div></div>
<p><img src="https://1.bp.blogspot.com/-aDO20c05bzI/WYM_VYpGyhI/AAAAAAAABac/AJEhTPhKizUnoku-zU5qV1K_o_xtkgmtACK4BGAYYCw/s1600/IMG_20170803_204119.jpg" alt="snapshot" /></p>

<p>I am able to</p>

<ul>
  <li>remotely trigger the shutter from WiFi.</li>
  <li>remotely trigger the shutter from remote.</li>
  <li>configure to take time lapse pics from WiFi. (Will automatically take pics according to the number of shots and interval)</li>
</ul>]]></content><author><name>ANANTHAKRISHNAN</name></author><category term="Electronics" /><summary type="html"><![CDATA[The Nikon DSLR camera I own does have a Bluetooth connection, but unfortunately it is of no use. You cannot trigger shots from Bluetooth. Also u can only share photos of low resolution across Bluetooth. What a shame!!! I also want a time lapse option which is absent in the camera. There is a WiFi option, but have to invest a lot more money to buy the WiFi adaptor. Fortunately it has an IR interface. So I thought of creating my own triggering device (like the ML-L3) which works over WiFi so that I can remotely trigger the shutter and also take time lapse pics.]]></summary></entry></feed>